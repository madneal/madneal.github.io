<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/go/</link>
    <description>Recent content in Go on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sat, 23 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AI 审代码，靠谱吗？——一个 GORM SQL 注入漏洞的思考</title>
      <link>https://madneal.com/post/gorm/</link>
      <pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/gorm/</guid>
      <description>&lt;h3 id=&#34;背景一道出乎意料的笔试题&#34;&gt;背景：一道出乎意料的笔试题&lt;/h3&gt;&#xA;&lt;p&gt;最近在校招面试中，我发现一道关于 GORM SQL 注入的笔试题，所有人的答案都错了。题目代码大致如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UsersHandler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;groupId&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;group_id&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;group&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GroupModel&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 注意这里的用法&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DB&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;First&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;group&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;groupId&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Error&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;JSON&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusOK&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;gin&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;H&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;group&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;group&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;问题是：&lt;strong&gt;这段代码是否存在 SQL 注入漏洞？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;正确答案是：&lt;strong&gt;会&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;说实话，这个答案起初也让我感到意外。在日常业务开发中，我们很少会这样直接将变量传给 &lt;code&gt;First&lt;/code&gt; 函数。&lt;code&gt;First&lt;/code&gt; 通常用于获取按主键排序的第一条记录，更常见的做法是通过 &lt;code&gt;Where&lt;/code&gt; 方法来构建查询条件。这不禁让我怀疑：这道题本身是不是有问题？&lt;/p&gt;&#xA;&lt;h3 id=&#34;初探源码first-函数的内部实现&#34;&gt;初探源码：&lt;code&gt;First&lt;/code&gt; 函数的内部实现&lt;/h3&gt;&#xA;&lt;p&gt;简单看了一下 &lt;code&gt;First&lt;/code&gt; 函数的实现：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// First finds the first record ordered by primary key, matching given conditions conds&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DB&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;First&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}, &lt;span style=&#34;color:#a6e22e&#34;&gt;conds&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}) (&lt;span style=&#34;color:#a6e22e&#34;&gt;tx&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;DB&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;tx&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Limit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;Order&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clause&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OrderByColumn&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Column&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;clause&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Column&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;clause&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CurrentTable&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;clause&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PrimaryKey&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;conds&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;exprs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;BuildCondition&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;conds&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;conds&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:]&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;); len(&lt;span style=&#34;color:#a6e22e&#34;&gt;exprs&lt;/span&gt;) &amp;gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;AddClause&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;clause&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Where&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Exprs&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;exprs&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RaiseErrorOnNotFound&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Statement&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Dest&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;dest&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;callbacks&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Execute&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;tx&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从源码看，当 &lt;code&gt;conds&lt;/code&gt; 参数不为空时，GORM 会调用 &lt;code&gt;tx.Statement.BuildCondition&lt;/code&gt;来处理查询条件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>NilAway：实用的 Go Nil Panic 检测方式</title>
      <link>https://madneal.com/post/nilayay/</link>
      <pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/nilayay/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://www.uber.com/en-NL/blog/nilaway-practical-nil-panic-detection-for-go/&#34;&gt;NilAway: Practical Nil Panic Detection for Go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/madneal&#34;&gt;madneal&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/madneal/articles-translator/&#34;&gt;articles-translator&lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2023/11/cover_photo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Uber 由于 &lt;a href=&#34;https://go.dev/?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;Go&lt;/a&gt; 语言的&lt;a href=&#34;https://www.uber.com/blog/tech-stack-part-one-foundation/?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;高性能&lt;/a&gt;，广泛采用其作为实现后端服务和库的主要编程语言。Uber 的 &lt;a href=&#34;https://www.uber.com/blog/go-monorepo-bazel/?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;Go monorepo&lt;/a&gt; 是 Uber 最大的代码库，包含 9000 万行代码（并且还在增长）。这使得编写可靠 Go 代码的工具成为我们开发基础设施的重要组成部分。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.golang-book.com/books/intro/8?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;指针&lt;/a&gt;（保存其他变量的内存地址而不是其实际值的变量）是 Go 编程语言的一个重要组成部分，有助于高效的内存管理和有效的数据操作。因此，程序员在编写 Go 程序时广泛使用指针，出于多种目的，如原地数据修改、并发编程、数据共享优化、内存使用优化以及支持接口和多态性。虽然指针功能强大且被广泛使用，但必须谨慎和明智地使用它们，以避免诸如空指针解引用导致的 nil panic 等常见陷阱。&lt;/p&gt;&#xA;&lt;h2 id=&#34;nil-panic-问题&#34;&gt;nil panic 问题&lt;/h2&gt;&#xA;&lt;p&gt;nil panic 是指程序尝试解引用一个 nil 指针时发生的运行时 panic。当一个指针为 nil 时，意味着它不指向任何有效的内存地址，尝试访问它指向的值将导致 panic（即运行时错误），错误信息如图 1 所示。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2023/11/figure_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;图 2 显示了在实现 Go 标准库（特别是 &lt;em&gt;net&lt;/em&gt; 包）中发现并解决的最近一次 &lt;a href=&#34;https://github.com/golang/go/pull/60823?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;nil panic 问题&lt;/a&gt; 的示例。由于在第 1859 行直接调用了方法 &lt;em&gt;RemoteAddr()&lt;/em&gt; 的返回值上的 &lt;em&gt;String()&lt;/em&gt; 方法，假设它总是非 nil 的，如图2所示，从而引发了 panic。当接口类型 &lt;em&gt;net.Conn&lt;/em&gt; 的字段 &lt;em&gt;c.rwc&lt;/em&gt; 被分配给结构 &lt;em&gt;net.conn&lt;/em&gt; 时导致了这个问题，因为如果发现连接 c 异常的话，它的 &lt;em&gt;RemoteAddr()&lt;/em&gt; 的具体实现可以返回 nil 值（如图 3 所示）。具体来说，&lt;em&gt;RemoteAddr()&lt;/em&gt; 可以在 L225 返回一个 &lt;a href=&#34;https://go.dev/tour/methods/13?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f#:~:text=A%20nil%20interface%20value%20holds,which%20concrete%20method%20to%20call.&#34;&gt;nil 接口值&lt;/a&gt;，当被调用方法（&lt;em&gt;.String()&lt;/em&gt;）时，由于 &lt;em&gt;nil&lt;/em&gt; 值不包含任何指向可以调用的具体方法的指针，从而导致 nil panic。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go 的漏洞管理</title>
      <link>https://madneal.com/post/go-vuln-management/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/go-vuln-management/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://go.dev/blog/vuln&#34;&gt;Vulnerability Management for Go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/madneal&#34;&gt;madneal&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/madneal/articles-translator/&#34;&gt;articles-translator&lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;我们很高兴地宣布 Go 对漏洞管理的新支持，这是我们帮助 Go 开发人员了解可能影响他们的已知漏洞的第一步。&lt;/p&gt;&#xA;&lt;p&gt;这篇文章概述了当前可用的内容以及该项目的后续计划。&lt;/p&gt;&#xA;&lt;h1 id=&#34;概述&#34;&gt;概述&lt;/h1&gt;&#xA;&lt;p&gt;Go 提供工具来分析你的代码库来发现已知漏洞。该工具由 Go 漏洞数据库提供支持，该数据库由 Go 安全团队规划。Go 的工具通过仅显示代码实际调用的函数中的漏洞来减少结果中的噪音。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://go.dev/blog/vuln/architecture.png&#34; alt=&#34;Architecture diagram of Go&amp;rsquo;s vulnerability management system&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;go-漏洞数据库&#34;&gt;Go 漏洞数据库&lt;/h1&gt;&#xA;&lt;p&gt;Go 漏洞数据库 (&lt;a href=&#34;https://vuln.go.dev&#34;&gt;https://vuln.go.dev&lt;/a&gt;) 是有关公共 Go 模块中可导入包中已知漏洞的综合信息源。&lt;/p&gt;&#xA;&lt;p&gt;漏洞数据来自现有来源（例如 CVE 和 GHSA）以及来自 Go 包维护者的直接报告。Go 安全团队会审查这些信息并将其添加到数据库中。&lt;/p&gt;&#xA;&lt;p&gt;我们鼓励包维护者在他们自己的项目中&lt;a href=&#34;https://go.dev/s/vulndb-report-new&#34;&gt;提供&lt;/a&gt;有关公共漏洞的信息，并&lt;a href=&#34;https://go.dev/s/vulndb-report-feedback&#34;&gt;更新&lt;/a&gt;其 Go 包中漏洞的现有信息。我们的目标是使报告过程成为一个非常容易的过程，因此请向我们反馈任何改进的&lt;a href=&#34;https://golang.org/s/vuln-feedback&#34;&gt;建议&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;Go 漏洞数据库可以在浏览器中的 pkg.go.dev/vuln 中查看。 有关数据库的更多信息，请参阅 go.dev/security/vuln/database。&lt;/p&gt;&#xA;&lt;h1 id=&#34;使用-govulcheck-检测漏洞&#34;&gt;使用 govulcheck 检测漏洞&lt;/h1&gt;&#xA;&lt;p&gt;新的 &lt;a href=&#34;https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck&#34;&gt;govulncheck 命令&lt;/a&gt;是一种低噪音、可靠的方式，让 Go 用户了解可能影响他们项目的已知漏洞。 Govulncheck 分析你的代码库并仅根据代码中的哪些函数传递调用易受攻击的函数来发现实际影响你的漏洞。 要开始使用 govulncheck，你可以从项目中运行以下命令：&lt;/p&gt;</description>
    </item>
    <item>
      <title>第一款Goland的SCA插件开发之旅</title>
      <link>https://madneal.com/post/goland-plugin/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/goland-plugin/</guid>
      <description>&lt;p&gt;插件开发，是一件即快乐又痛苦的事情。快乐的是你可以根据自己的需求通过插件来进行实现，比如经常看到的 Chrome 的插件开发。插件对于应用的原生生态有着很大的益处，往往那些特别优秀的插件甚至会被官方收编或者在正式功能中加入插件的功能。痛苦的是你需要去看文档，看插件开发的各种文档，如果文档不详细的话，痛苦加倍。程序猿最讨厌的事就是看别人的文档以及自己写文档。当然，除了文档，作为小白你还会踩到各种各样的坑。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先吐槽&#34;&gt;先吐槽&lt;/h2&gt;&#xA;&lt;p&gt;五一期间，疫情实在是憋得无趣，于是就成生了编写一款 Goland 上的 SCA 检测的插件的想法。Jetbrains 作为一个 IDE 开发公司，通过 Java 的语言生态开发出 IDEA 全家桶系列如此精美并且功能强大的 IDE 产品。其背后的技术能力不得不让人折服。IDE 是程序猿开发的生产力，而 Jetbrains 公司则是生产力的生产力。这几天，笔者就在着力开发一款针对 Goland 的第一款 SCA 检测插件。相较于以往 Chrome 或者 Burp 的插件开发而言，Jetbrains 插件开发的难度大大提升，主要是因为以下几点原因：&lt;/p&gt;&#xA;&lt;h3 id=&#34;api-文档过于简单&#34;&gt;API 文档过于简单&lt;/h3&gt;&#xA;&lt;p&gt;IntelliJ 只提供了官方的&lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/welcome.html&#34;&gt;文档地址&lt;/a&gt;。这里面包含了一些 API 的实现以及介绍，但是太简单了。全篇中几乎找不到相关实现的示例代码，通常只有寥寥数语的介绍。举一个例子，希望能够通过插件能够创建文件，在找遍了官方的文档后，只发现了以下内容：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/05/03/wGphsPyntzdJgqc.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;文档里面提到可以使用 &lt;code&gt;PsiDirectory&lt;/code&gt; 中的 &lt;code&gt;add&lt;/code&gt; 方法来保存 &lt;code&gt;PSI&lt;/code&gt; 文件，但它没说 HOW！那怎么办，只能去 Github 中去搜索代码关键字，然后扒别人的代码去看别人是如何实现的，这绝对是一个非常痛苦的过程，尤其是你看的是一个实现很糟糕的插件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;api-复杂性&#34;&gt;API 复杂性&lt;/h3&gt;&#xA;&lt;p&gt;由于 IDEA 强大的生态，其 API 要考虑到兼容性以及很多特性，所以 API 中很多的含义不好理解。其本身也是包含了很多复杂的配置项，同时还需要综合考虑插件是通过什么样的形式去实现。&lt;/p&gt;&#xA;&lt;h3 id=&#34;太强大的官方模板&#34;&gt;太“强大的”官方模板&lt;/h3&gt;&#xA;&lt;p&gt;官方提供了一个创建插件的&lt;a href=&#34;https://github.com/JetBrains/intellij-platform-plugin-template&#34;&gt;模板&lt;/a&gt;。首先承认的一点是这个模板的功能非常强大，涵盖插件开发、单元测试、质量检查、发布的整个生命周期，并且与 Github 无缝集成。不过作为模板，它包含的内容是不是太多了呢？这个模板的 README 几乎看了3遍之后才知道里面包含了哪些内容。实际上，对于一个小白来说，这个过程挺痛苦的，甚至可能有的人看了一下就萌发了退意。里面的一些模块，比如单元测试模块以及覆盖率检查这些模块，可以作为可选项，并不一定要默认就包含进去。&lt;/p&gt;&#xA;&lt;h3 id=&#34;bug-有一点点多&#34;&gt;Bug 有一点点多&lt;/h3&gt;&#xA;&lt;p&gt;目前尚未确定是否这是一个 Bug，但是笔者严重怀疑这是一个 Bug。上面提到的模板，通过 Gradle 实现了一系列的任务。在 &lt;code&gt;Run Verifications&lt;/code&gt; 中，有个小任务是 &lt;code&gt;./gradlew listProductsReleases&lt;/code&gt;，它会在 &lt;code&gt;build&lt;/code&gt; 文件中生成一个 &lt;code&gt;listProductsReleases.txt&lt;/code&gt; 的文件。而这个文件中的版本应该适用于 IDE 兼容型的检查。但是在运行这个 task 的过程中，反复遇到下面的报错：&lt;/p&gt;</description>
    </item>
    <item>
      <title>goland-2022.01版本最新实用功能</title>
      <link>https://madneal.com/post/goland/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/goland/</guid>
      <description>&lt;p&gt;在 Go 的开发过程中，经常遇到一个非常麻烦的问题就是 &lt;code&gt;JSON&lt;/code&gt; 的解析。因为 Go 中的 &lt;code&gt;JSON&lt;/code&gt; 的解析，一般来说需要定义对应 &lt;code&gt;JSON&lt;/code&gt; 的 struct。或者使用 &lt;code&gt;interface{}&lt;/code&gt; 类型来进行定义，然后再进行类型的转换。当然这在 Python 中可能两三句话就搞定了。&lt;/p&gt;&#xA;&lt;p&gt;在 Goland 2022.01 最新版本中，终于迎来了在 &lt;code&gt;JSON&lt;/code&gt; 方面解析的便捷功能。在最新版本中，只要将 &lt;code&gt;JSON&lt;/code&gt;  粘贴到 IDE 中就会提示是否转化为 &lt;code&gt;struct&lt;/code&gt; 类型，所有的字段都会被生成，相对于以前的一个个的手动的定义要方便太多太多了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/05/01/vrSC83Kauqls1UY.gif&#34; alt=&#34;go_converting_json_to_struct.animated.gif&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;还可以使用 Action 来进行转换动作，&lt;code&gt;Generate Go Type form JSON&lt;/code&gt;：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/05/01/3vfFiJLTnHZ7h5q.gif&#34; alt=&#34;go_modify_json_for_a_struct_in_a_separate_dialog.animated.gif&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;同时还可以添加新的 tag，key 以及修改 key 的代码风格，调用来说一般使用 &lt;code&gt;alt+enter&lt;/code&gt; 快捷键即可。&lt;/p&gt;&#xA;&lt;h2 id=&#34;intention-actions&#34;&gt;Intention actions&lt;/h2&gt;&#xA;&lt;p&gt;字段添加新的 tag&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;点击 &lt;code&gt;struct&lt;/code&gt; 的字段然后按 &lt;code&gt;alt+enter&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;选择 &lt;code&gt;Add key to tags&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/05/01/GQ4BeAxFrzinKPw.gif&#34; alt=&#34;go_add_new_tags_to_a_struct_field.animated.gif&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;修改 key&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;点击 &lt;code&gt;struct&lt;/code&gt; 的字段然后按 &lt;code&gt;alt+enter&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;选择 &lt;code&gt;Update key value in tags&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/05/01/fEBJmDLhl8KeoIa.gif&#34; alt=&#34;go_modify_keys_in_field_tags.animated.gif&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>富文本场景下的 XSS</title>
      <link>https://madneal.com/post/stored-xss/</link>
      <pubDate>Mon, 30 Aug 2021 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/stored-xss/</guid>
      <description>&lt;p&gt;富文本编辑器是一个常见的业务场景，一般来说，通过富文本编辑器编辑的内容最终也会 html 的形式来进行渲染，比如 VUE，一般就会使用 &lt;code&gt;v-html&lt;/code&gt; 来承载富文本编辑的内容。因为文本内容需要通过 html 来进行渲染，那么显然普通的编码转义不适合这种场景了，因为这样最终的呈现的效果就不是我们想要的了。针对于这种场景，显然过滤是唯一的解决方案了，不过过滤其实可以在后端和前端都是可以做的，后端做的话，一般是在数据存储在数据库之前。前端做的话，则是在数据最终在页面渲染之前做过滤。&lt;/p&gt;&#xA;&lt;p&gt;前端的过滤方案，可以尝试使用开源的 &lt;code&gt;[js-xss](https://github.com/leizongmin/js-xss)&lt;/code&gt;。先介绍一下这个库的使用方法，这个库可以在 nodejs 中使用，同样也可以在浏览中直接引入使用。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// nodejs 中使用&#xA;var xss = require(&amp;#34;xss&amp;#34;);&#xA;var html = xss(&amp;#39;&amp;lt;script&amp;gt;alert(&amp;#34;xss&amp;#34;);&amp;lt;/script&amp;gt;&amp;#39;);&#xA;console.log(html);&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 浏览器中使用&#xA;&amp;lt;script src=&amp;#34;https://rawgit.com/leizongmin/js-xss/master/dist/xss.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  // apply function filterXSS in the same way&#xA;  var html = filterXSS(&amp;#39;&amp;lt;script&amp;gt;alert(&amp;#34;xss&amp;#34;);&amp;lt;/scr&amp;#39; + &amp;#34;ipt&amp;gt;&amp;#34;);&#xA;  alert(html);&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般在 vue 的项目中，通过 webpack 也可以直接通过 CommonJS 的方式引入，与 nodejs 的引入方式基本一致。值得注意的一个问题是，默认情况下会去禁用 style 属性，这样会导致富文本的样式展示异常，需要禁用 css 过滤或者使用白名单的方式来进行过滤。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xssFilter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xss&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FilterXSS&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xssFilter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;script&amp;gt;alert(&amp;#34;xss&amp;#34;);&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xssFilter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xss&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FilterXSS&lt;/span&gt;({&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;whiteList&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/^fixed|relative$/&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xssFilter&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;script&amp;gt;alert(&amp;#34;xss&amp;#34;);&amp;lt;/script&amp;gt;&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其实 js-xss 的原理并不是很复杂，如果去扒一下源码，原理其实主要就是实现标签和属性的白名单过滤，这样的方案简单有效。因为默认配置了大部分标签以及属性的白名单方案，所以一般可以做到开箱即用，当然如果有定制化的需求需要进一步定制化函数。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GShark-监测你的 Github 敏感信息泄露</title>
      <link>https://madneal.com/post/gshark-%E7%9B%91%E6%B5%8B%E4%BD%A0%E7%9A%84github%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Wed, 31 Oct 2018 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/gshark-%E7%9B%91%E6%B5%8B%E4%BD%A0%E7%9A%84github%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</guid>
      <description>&lt;p&gt;近几年由于 Github 信息泄露导致的信息安全事件屡见不鲜，且规模越来越大。就前段时间华住集团旗下酒店开房记录疑似泄露，涉及近5亿个人信息。后面调查发现疑似是华住的程序员在 Github 上上传的 CMS 项目中包含了华住敏感的服务器及数据库信息，被黑客利用导致信息泄露（这次背锅的还是程序猿）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;起源&#34;&gt;起源&lt;/h2&gt;&#xA;&lt;p&gt;对于大型 IT 公司或者其他行业，这种事件发生的概率实在是太常见了，只不过看影响的范围。现在大家看到的，也仅仅只是传播出来的而已。企业没办法保证所有人都能够遵守规定不要将敏感信息上传到 Github，尤其是对于那种特别依赖于外包的甲方企业，而甲方的开发人员也是一无所知，这种事件发生也就是司空见惯了。&lt;/p&gt;&#xA;&lt;p&gt;废话说了一大通（可能是最近看安全大佬的文章看多了），终于要介绍一下我的这个项目，&lt;a href=&#34;https://github.com/neal1991/gshark&#34;&gt;GShark&lt;/a&gt;。这个工具主要是基于 golang 实现，这也是第一次学习 golang 的项目，结合 go-macron Web 框架实现的一个系统。其实最初我是看到小米安全开源的 &lt;a href=&#34;https://github.com/MiSecurity/x-patrol&#34;&gt;x-patrol&lt;/a&gt; 项目。网上这种扫描 Github 敏感信息的工具多如皮毛，我看过那种 star 数上千的项目，感觉实现方式也没有很好。因为说到底，大家都是通过 Github 提供的 API 结合相应的关键字来进行搜索的。但是，x-patrol 的这种实现方式我觉得是比较合理的，通过爬虫爬取信息，并对结果进行审核。所以，最初我是一个 x-patrol 的使用者。使用过程中，也遇到过一些问题，因为这个库似乎就是小米的某个固定的人维护的，文档写的不是特别清晰。中间我有提过 PR，但都被直接拒绝掉了。后来，我就想基于 x-patrol 来实现一套自己的系统，这也就是 GShark 的来由了。目前，这个项目与 x-patrol 已经有着很大的变化，比如移除了本地代码的检测，因为这个场景没有需求，其实我本身自己也实现了一个基于 lucene 的敏感信息检索工具。另外，将前端代码进行了梳理，并使用模板引擎来做模板的嵌套使用。基于 &lt;a href=&#34;https://github.com/casbin/casbin&#34;&gt;casbin&lt;/a&gt;实现基于角色的权限控制等等。&lt;/p&gt;&#xA;&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;&#xA;&lt;p&gt;讲完了起源，接着讲一讲这个系统的原理。基本上，这类工具都是首先会在 Github 申请相应的 token 来实现，接着通过相应的 API 来进行爬取。本项目主要是基于 Google 的 &lt;a href=&#34;https://github.com/google/go-github&#34;&gt;go-github&lt;/a&gt;。这个 API 使用起来还是比较方便的。通过这个 API 我们可实现在 Github 来进行搜索，其实这基本上等同于 &lt;a href=&#34;https://github.com/search/advanced?&#34;&gt;Advanced Search&lt;/a&gt;。因为 API 提供的搜索能力肯定就是 Github 本身所具有的搜索能力。最基本的包括关键及，以及一些 owner 信息以及 star 数等等。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://imgchr.com/i/iWe0kn&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2018/10/31/iWe0kn.md.png&#34; alt=&#34;iWe0kn.md.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;另外一点就是 Github 的搜索是基于 elasticsearch 的，因此也是支持 lucene 语法的。GShark 的黑名单过滤其实就是通过这个规则来实现的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何做一个完美的页码跳转</title>
      <link>https://madneal.com/post/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E7%9A%84%E9%A1%B5%E7%A0%81%E8%B7%B3%E8%BD%AC/</link>
      <pubDate>Wed, 28 Mar 2018 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AE%8C%E7%BE%8E%E7%9A%84%E9%A1%B5%E7%A0%81%E8%B7%B3%E8%BD%AC/</guid>
      <description>&lt;h2 id=&#34;需求&#34;&gt;需求&lt;/h2&gt;&#xA;&lt;p&gt;想给系统实现一个选择不同页面的功能，一开始的代码逻辑比较混乱，后来抽象出来就比较清楚了。第一步，咱们先说需求：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://ozfo4jjxb.bkt.clouddn.com/page_navigation.gif&#34; alt=&#34;page_navagation&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题定义&#34;&gt;问题定义&lt;/h2&gt;&#xA;&lt;p&gt;我们希望实现一个页面切换，每次显示的可选的页码长度都是固定的，比如从第 1 页到第 11 页，从 21 页 到 31 页。这样能够实现一个统一的切换效果，可能还需要考虑一些边界情况。现在，我们令总页码数为 &lt;code&gt;pages&lt;/code&gt;，当前选择的页码为 &lt;code&gt;p&lt;/code&gt;,&lt;code&gt;p&lt;/code&gt; 往左走或者往右走的步长是固定的，令步长为 &lt;code&gt;step&lt;/code&gt;。那么我们现在要做的事情可以这么理解，我们要从 1 到 &lt;code&gt;pages&lt;/code&gt; 之间截取可用的页码数，假设开始页码为 &lt;code&gt;startIndex&lt;/code&gt;，结束页码为 &lt;code&gt;endIndex&lt;/code&gt;。抽象一下，我们可以总结出以下几种情况：&lt;/p&gt;&#xA;&lt;h3 id=&#34;condition1&#34;&gt;Condition1&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;startIndex &amp;lt; 1 &amp;amp;&amp;amp; endIndex &amp;lt;= pages&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://ozfo4jjxb.bkt.clouddn.com/condition1.png&#34; alt=&#34;condition1.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;condition2&#34;&gt;Condition2&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;startIndex &amp;gt;= 1 &amp;amp;&amp;amp; endIndex &amp;gt; pages&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://ozfo4jjxb.bkt.clouddn.com/condition2.png&#34; alt=&#34;condition2.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;condition3&#34;&gt;Condition3&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;startIndex &amp;lt; 1 &amp;amp;&amp;amp; endIndex &amp;gt; pages&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://ozfo4jjxb.bkt.clouddn.com/condition3.png&#34; alt=&#34;condition3.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;condition4&#34;&gt;Condition4&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;startIndex &amp;gt;= 1 &amp;amp;&amp;amp; endIndex &amp;lt;= pages&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://ozfo4jjxb.bkt.clouddn.com/condition4.png&#34; alt=&#34;condition4.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;这样抽象成四种情况，这样就比较容易理解。以线段的方式来理解，则是从 1 到 &lt;code&gt;pages&lt;/code&gt; 截取页码。&lt;/p&gt;&#xA;&lt;h2 id=&#34;代码实现&#34;&gt;代码实现&lt;/h2&gt;&#xA;&lt;p&gt;Show me the code.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
