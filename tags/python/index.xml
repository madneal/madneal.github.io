<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/python/</link>
    <description>Recent content in Python on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Thu, 04 Jul 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>cve check</title>
      <link>https://madneal.com/post/check-cve/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/check-cve/</guid>
      <description>&lt;p&gt;今天想检查一下 Gitlab 11.9.0 产品受哪些 cve 的影响。其实网上已经有很多网站可以查询产品的相关 cve，但就是粒度比较粗。我想在 cve 列表中筛选出特定的版本，已经特定的版本，比如是社区版还是旗舰版。找了一下，没有发现完全符合这个要求的。后来在网上我就看到了一个网站是可以提供 cve 的 API 查询的。可以通过网站 API 可以获取特定的数据。&lt;/p&gt;&#xA;&lt;p&gt;可以通过 &lt;a href=&#34;https://cve.circl.lu/api/&#34;&gt;https://cve.circl.lu/api/&lt;/a&gt; 可以看到 API 文档。可以通过 cve id 以及 product 以及其他更多信息来查询。最有用的 API 就是这一个，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/07/04/ZUIwgH.png&#34; alt=&#34;ZUIwgH.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以通过 vendor 以及 product 获取指定 vendor 和 product 的 cve 列表。这个 API 返回的结果是一个 JSON 数组，我们需要在这里面过滤出相应的版本号以及 edition 版本。另外由于请求的结果一般是一个很长的 json 数据，我的做法是第一次请求，可以吧结果保存成 JSON 文件，第二次请求的时候首先检查这个 JSON 文件的最近修改时间，如果最近修改时间小于指定的天数，比如 3 天，如果 3 天内修改过的话，直接从 JSON 文件加载数据，否则重新发送请求，加载数据。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# check if file modified in the last several days&#xA;def check_file_modified(filename, days):&#xA;    file_modify_time = getmtime(filename)&#xA;    return time() - file_modify_time &amp;lt; (days * 3600 * 1000)&#xA;&#xA;&#xA;def write_json(filename, result):&#xA;    with open(filename, &amp;#39;w&amp;#39;) as f:&#xA;        dump(result, f, indent=2)&#xA;&#xA;&#xA;def write_csv(filename, result, header):&#xA;    with open(filename, &amp;#39;w&amp;#39;, newline=&amp;#39;&amp;#39;) as f:&#xA;        writer = csv.writer(f, delimiter=&amp;#39;,&amp;#39;)&#xA;        writer.writerow(header)&#xA;        for ele in result:&#xA;            writer.writerow([ele[&amp;#34;id&amp;#34;], ele[&amp;#34;last-modified&amp;#34;], ele[&amp;#34;cvss&amp;#34;], ele[&amp;#34;summary&amp;#34;]])&#xA;&#xA;&#xA;def search(params, options):&#xA;    url = &amp;#34;https://cve.circl.lu/api/search/&amp;#34; + params&#xA;    print(url)&#xA;    filename = f&amp;#34;{params.replace(&amp;#39;/&amp;#39;, &amp;#39;-&amp;#39;)}.json&amp;#34;&#xA;    try:&#xA;        if isfile(filename) and check_file_modified(filename, 3):&#xA;            with open(filename, &amp;#39;r&amp;#39;) as f:&#xA;                result = loads(f.read())&#xA;        else:&#xA;            res = get(url)&#xA;            if res.status_code == 200:&#xA;                with open(filename, &amp;#39;w&amp;#39;) as f:&#xA;                    f.write(res.text)&#xA;                result = loads(res.text)&#xA;            else:&#xA;                print(&amp;#34;Request failed: %d&amp;#34;.format(res.status_code))&#xA;        cve_result = []&#xA;        for ele in result:&#xA;            if has_cve(ele, options.vendor, options.product, options.version, options.edition):&#xA;                obj = {&#xA;                    &amp;#34;id&amp;#34;: ele[&amp;#34;id&amp;#34;],&#xA;                    &amp;#34;last-modified&amp;#34;: ele[&amp;#34;last-modified&amp;#34;],&#xA;                    &amp;#34;cvss&amp;#34;: ele[&amp;#34;cvss&amp;#34;],&#xA;                    &amp;#34;summary&amp;#34;: ele[&amp;#34;summary&amp;#34;]&#xA;                }&#xA;                cve_result.append(obj)&#xA;            else:&#xA;                continue&#xA;        print(f&amp;#34;{options.vendor}:{options.product}:{options.version}:{options.edition} &amp;#34;&#xA;              f&amp;#34;has impacted by {len(cve_result)} cve&amp;#34;)&#xA;        if options.output is None or options.output == &amp;#34;csv&amp;#34;:&#xA;            write_csv(&amp;#34;result.csv&amp;#34;, cve_result, [&amp;#34;id&amp;#34;, &amp;#34;last-modified&amp;#34;, &amp;#34;cvss&amp;#34;, &amp;#34;summary&amp;#34;])&#xA;        else:&#xA;            write_json(&amp;#34;result.json&amp;#34;, cve_result)&#xA;    except Exception as e:&#xA;        print(e)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整的项目地址可以参考 &lt;a href=&#34;https://github.com/neal1991/check-cve/blob/master/check-cve.py&#34;&gt;https://github.com/neal1991/check-cve/blob/master/check-cve.py&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Help -- hack the box</title>
      <link>https://madneal.com/post/help-hack-the-box/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/help-hack-the-box/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/04/21/EFe80A.png&#34; alt=&#34;EFe80A.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Target: 10.10.10.121(OS: Linux)&lt;/p&gt;&#xA;&lt;p&gt;Kali: 10.10.16.28&lt;/p&gt;&#xA;&lt;p&gt;To be honest, Help is not a difficult box. But there are some rabbit holes in the box. And in some case, you may come across some very strange situations. May you should step back, find if there is something wrong. For the PrivEsc of root, never give up trying the most basic method.&lt;/p&gt;&#xA;&lt;h2 id=&#34;infomation-enumeration&#34;&gt;Infomation Enumeration&lt;/h2&gt;&#xA;&lt;p&gt;Firstly, gather open ports and services:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Nmap 7.70 scan initiated Sat Apr 20 02:13:56 2019 as: nmap -sC -sV -oA services 10.10.10.121&#xA;Nmap scan report for 10.10.10.121&#xA;Host is up (1.2s latency).&#xA;Not shown: 997 closed ports&#xA;PORT     STATE SERVICE VERSION&#xA;22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.6 (Ubuntu Linux; protocol 2.0)&#xA;| ssh-hostkey: &#xA;|   2048 e5:bb:4d:9c:de:af:6b:bf:ba:8c:22:7a:d8:d7:43:28 (RSA)&#xA;|   256 d5:b0:10:50:74:86:a3:9f:c5:53:6f:3b:4a:24:61:19 (ECDSA)&#xA;|_  256 e2:1b:88:d3:76:21:d4:1e:38:15:4a:81:11:b7:99:07 (ED25519)&#xA;80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))&#xA;|_http-server-header: Apache/2.4.18 (Ubuntu)&#xA;|_http-title: Apache2 Ubuntu Default Page: It works&#xA;3000/tcp open  http    Node.js Express framework&#xA;|_http-title: Site doesn&amp;#39;t have a title (application/json; charset=utf-8).&#xA;Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel&#xA;&#xA;Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .&#xA;# Nmap done at Sat Apr 20 02:14:40 2019 -- 1 IP address (1 host up) scanned in 43.61 seconds&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The port 80 seems to be an HTTP service. Access to &lt;code&gt;http://10.10.10.121&lt;/code&gt;, nothing special but just the apache default web page. Try gobuster:&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用 python 生成可视化报告</title>
      <link>https://madneal.com/post/%E5%88%A9%E7%94%A8python%E7%94%9F%E6%88%90%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%88%A9%E7%94%A8python%E7%94%9F%E6%88%90%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%A5%E5%91%8A/</guid>
      <description>&lt;p&gt;Python 作为一种常用的胶水语言，可用于各种用途。最近有个需求需要获取 SIME 平台的数据并形成月度报告。我的想法就是通过平台的 API 获取数据，然后基于 word 以及 matplotlib 来生成可视化报告。在这里要介绍一个比较好用的 python 库，docxtpl。这个库是一个基于 python-docx 的库，可以通过模板来生成报告。下面就介绍一下如何使用这些库，以及使用过程中的一些小问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;&#xA;&lt;p&gt;docxtpl 是基于 jinja2 引擎的语法，类似于常见的 html 模板语法，变量经常会放在 &lt;code&gt;{{}}&lt;/code&gt; 中。假如我们希望在模板中设置变量 a 的值，那么我么可以在模板中填写 {{a}}。最后，我们通过 &lt;code&gt;render&lt;/code&gt; 来渲染模板即可。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Docxtpl(filename)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13413&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Render(context)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么如果我们希望在模板中插入一个图片该怎么做呢，可以使用 InlineImage 去实例化图片：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; docxtpl &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; DocxTemplate, InlineImage&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for height and width you have to use millimeters (Mm), inches or points(Pt) class :&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; docx.shared &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Mm, Inches, Pt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; jinja2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; jinja2.utils &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Markup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tpl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;DocxTemplate(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/inline_image_tpl.docx&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myimage&amp;#39;&lt;/span&gt; : InlineImage(tpl,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/python_logo.png&amp;#39;&lt;/span&gt;,width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myimageratio&amp;#39;&lt;/span&gt;: InlineImage(tpl, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/python_jpeg.jpg&amp;#39;&lt;/span&gt;, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;), height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;frameworks&amp;#39;&lt;/span&gt; : [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt; : InlineImage(tpl,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/django.png&amp;#39;&lt;/span&gt;,height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The web framework for perfectionists with deadlines&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt; : InlineImage(tpl,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/zope.png&amp;#39;&lt;/span&gt;,height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zope is a leading Open Source Application Server and Content Management Framework&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;: InlineImage(tpl, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/pyramid.png&amp;#39;&lt;/span&gt;, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pyramid is a lightweight Python web framework aimed at taking small web apps into big web apps.&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt; : InlineImage(tpl,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/bottle.png&amp;#39;&lt;/span&gt;,height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bottle is a fast, simple and lightweight WSGI micro web-framework for Python&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;: InlineImage(tpl, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/tornado.png&amp;#39;&lt;/span&gt;, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tornado is a Python web framework and asynchronous networking library.&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# testing that it works also when autoescape has been forced to True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jinja_env &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jinja2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Environment(autoescape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tpl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;render(context, jinja_env)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tpl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/inline_image.docx&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样还可以使用宽度高度单位来设置图片的大小。另外我们还可以利用表格的模板来动态设置数据，具体可以参考 &lt;a href=&#34;https://github.com/elapouya/python-docx-template/tree/master/tests&#34;&gt;test&lt;/a&gt;，里面有各种例子可以参考。&lt;/p&gt;</description>
    </item>
    <item>
      <title>聊聊答题应用题库的建立</title>
      <link>https://madneal.com/post/%E8%81%8A%E8%81%8A%E7%AD%94%E9%A2%98%E5%BA%94%E7%94%A8%E9%A2%98%E5%BA%93%E7%9A%84%E5%BB%BA%E7%AB%8B/</link>
      <pubDate>Fri, 23 Feb 2018 22:30:09 +0000</pubDate>
      <guid>https://madneal.com/post/%E8%81%8A%E8%81%8A%E7%AD%94%E9%A2%98%E5%BA%94%E7%94%A8%E9%A2%98%E5%BA%93%E7%9A%84%E5%BB%BA%E7%AB%8B/</guid>
      <description>&lt;p&gt;前段时间，答题 APP 如火如荼的发展，各大互联网公司都加入了撒币大战，包括像冲顶大会，百万英雄，芝士英雄等等。随之而来的也是各个答题应用辅助的兴起。&lt;/p&gt;&#xA;&lt;p&gt;网上已经有不少答题应用的辅助，一般来说包括两个步骤，即获取题目选项以及搜索答案。对于题目以及选项的获取包括利用 adb 抓取手机屏幕截图，然后使用 ocr(optical character recognization) 的方式去识别题目和选项。大多数使用的 ocr 工具有谷歌开源的 &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract&#34;&gt;tesseract-ocr&lt;/a&gt;以及百度的 ocr API。谷歌的 tesseract-ocr 可以在本地进行安装，软件下载地址是 &lt;a href=&#34;https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-3.05.01.exe&#34;&gt;https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-setup-3.05.01.exe&lt;/a&gt; ， 安装的时候注意选择增加中文简体语言包，否则无法识别中文。另外一种方法就是利用百度的 ocr API，可以免费申请，使用起来比较方便，识别率相对来说也更加准确。百度 API 还有一个优点是图片无需处理就可以进行识别，而 tesseract-ocr 一般还需要对图片进行简单的处理。获取题目以及选项的另外一种方式就是使用抓包工具去抓取 APP 请求从而获取题目以及选项信息。&lt;/p&gt;&#xA;&lt;p&gt;另一方面，对于题目答案的搜索。常见的几种做法是直接用题目作为搜索关键字打开浏览器，或者是问题加选项搜索，获取搜索引擎搜索的结果数量。通过结果数量来判断问题和选项的相关性从而判断问题的答案，一般来说这种方式获取的答案都是不太准确的，一是因为现在题目的出题方式越来越诡异，二是相关性越大并不一定就意味着是正确答案。本来对于题目和选项的判断就是很难的一件事情，除非你能做出很完美的语意理解，否则很难判断出正确的选项。还有一种比较直白的方式就是建立题库。在本文中，我们讨论一种建立题库的方式，这里只是做一个简单的探索，未必在实际中就能够使用，因为题库必须足够全才能够发挥威力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用-elasticsearch-建立题库&#34;&gt;使用 elasticsearch 建立题库&lt;/h2&gt;&#xA;&lt;p&gt;本文主要讲解关于题库的建立方面的很小的一方面进行探索，对于答题辅助的使用可以阅读原文查看完整介绍，代码主要是基于&lt;a href=&#34;https://github.com/Skyexu/TopSup&#34;&gt;TopSup&lt;/a&gt; 做了一些调整。Elasticsearch 将被用于题库的建立，对于 es 的安装可以查看第一篇文章。有人可能会觉得用 es 来做题库，简直就是高射炮打蚊子——小题大做。但我觉得 es 安装和使用都很方便，得益于其强大的 RESTFUL接口，几乎可以用任何工具操控 es。Talk is cheap, show me the code.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; elasticsearch &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Elasticsearch&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;write_quetion&lt;/span&gt;():&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  question &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;谁是世界上最帅的人&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;answer&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Neal&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  es &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Elasticsearch({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;})&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  es&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(index&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;question-index&amp;#39;&lt;/span&gt;, doc_type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;question&amp;#39;&lt;/span&gt;, id&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, body&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;question)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面是一个简单的像索引中写入一条记录的代码片段，其实 es 可以算是一种非关系型数据库，在 &lt;a href=&#34;https://db-engines.com/en/ranking&#34;&gt;DB-Engines&lt;/a&gt; 的最新排名中，es 已经蹿到了第 9 名。Elasticsearch 中的某些概念可以和关系型数据库进行类比：&lt;/p&gt;</description>
    </item>
    <item>
      <title>从后台看python--为什么说python是慢的</title>
      <link>https://madneal.com/post/%E4%BB%8E%E5%90%8E%E5%8F%B0%E7%9C%8Bpython--%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4python%E6%98%AF%E6%85%A2%E7%9A%84/</link>
      <pubDate>Tue, 08 Dec 2015 10:14:12 +0000</pubDate>
      <guid>https://madneal.com/post/%E4%BB%8E%E5%90%8E%E5%8F%B0%E7%9C%8Bpython--%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4python%E6%98%AF%E6%85%A2%E7%9A%84/</guid>
      <description>&lt;p&gt;python越来越作为一种科学技术研究的语言越来越流行，可是我们经常听到一个问题，python是慢的。那么我们从后台分析一下，为什么python是慢的。&#xA;python是一种动态类型，解释型语言，它的值都是存储在分散的对象中，而不是紧密的缓存之中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1python是动态类型语言&#34;&gt;1.python是动态类型语言&lt;/h2&gt;&#xA;&lt;p&gt;这意味着编译器在程序执行之前并不知道变量定义的类型。C定义变量和Python定义变量的方式的区别：&#xA;对于C，编译器通过定义知道变量的类型；然而对于python中的变量，当你知道变量的类型的时候已经是程序执行的时候了。&#xA;我们分析一小段代码分别在python和C中执行的具体区别：&#xA;在C中，如果你写如下代码：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int a = 1;&#xA;int b = 2;&#xA;int c = a + b;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.分配一个&lt;!-- raw HTML omitted --&gt;类型1给a&#xA;2.分配一个&lt;!-- raw HTML omitted --&gt;类型2给b&#xA;3.调用一个二进制加法&amp;lt;int,int&amp;gt;(a,b)&#xA;4.将结果分配给c&lt;/p&gt;&#xA;&lt;p&gt;在python中，同样的&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = 1&#xA;b = 2&#xA;c = a + b&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.分配1给a&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置一个对象，然后将它的类型设置为整数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将它的值设为1&#xA;2.分配2给b&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置一个对象，然后将它的类型设置为整数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将它的值设为2&#xA;3.调用一个二进制加法(a,b)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;寻找一个类型在对象中&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;a是一个整数，它的值是a&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;寻找一个类型在对象中&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;b是一个整数，它的值是b&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;调用一个二进制加法&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;返回结果，结果是一个整数&#xA;4.产生一个对象c&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将一个对象的类型设置为整数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将它的值分配给结果&#xA;动态类型意味着每一步操作需要更多的步骤。python比c慢的一个基本的原因就是数字计算上面的操作。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2python是一种解释型的语言而不是编译型的&#34;&gt;2.python是一种解释型的语言而不是编译型的&lt;/h2&gt;&#xA;&lt;p&gt;我们可以看到解释型语言和编译型语言的区别。一个聪明的编译器知道怎么提前优化，避免重复和不必要的操作，从而提高效率。当然，在这一点上也是仁者见仁智者见智。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3python的对象模型导致存储效率低下&#34;&gt;3.python的对象模型导致存储效率低下&lt;/h2&gt;&#xA;&lt;p&gt;python存储数据效率低下的原因，主要可以从下图看出：&#xA;&lt;img src=&#34;http://img.blog.csdn.net/20151208101154529&#34; alt=&#34;这里写图片描述&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当然说了python这么多缺点，为什么python用的人还这么多，因为它很简单啊。python用起来的确很简单，就我个人的使用感受而言，除了matlab，我没有看过比python还要简单的语言了。而且python的开源的库很多，所以做很多东西都很方便。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django学习——开发你的第一个Django应用2</title>
      <link>https://madneal.com/post/django%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAdjango%E5%BA%94%E7%94%A82/</link>
      <pubDate>Sun, 11 Oct 2015 13:02:59 +0000</pubDate>
      <guid>https://madneal.com/post/django%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAdjango%E5%BA%94%E7%94%A82/</guid>
      <description>&lt;p&gt;接着上一节的内容来说。我们将继续关注与上一节制作的polls应用以及Django自动产生额度管理网站。&lt;/p&gt;&#xA;&lt;h2 id=&#34;产生一个管理员用户&#34;&gt;产生一个管理员用户&lt;/h2&gt;&#xA;&lt;p&gt;首先我们需要产生一个管理员用户，运行如下命令；&#xA;&lt;code&gt;python manage.py createsuperuser&lt;/code&gt;&#xA;下面会让你输入用户名，邮箱以及用户密码，按照要求填写就可以了，这样我们就产生了一个管理员账户了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发服务器&#34;&gt;开发服务器&lt;/h2&gt;&#xA;&lt;p&gt;Django的管理员网站是默认激活的，我们可以通过上节讲到的方式激活服务器：&#xA;&lt;code&gt;python manage.py runserver&lt;/code&gt;&#xA;现在打开浏览器，输入http://localhost:8000/admin/你就可进入管理员登录界面了，输入用户名和密码就可以登录了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;进入管理员网站&#34;&gt;进入管理员网站&lt;/h2&gt;&#xA;&lt;p&gt;当你以超级管理员的身份进去管理员网站，你就可以看到管理员的默认界面了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;在管理员中修改poll应用&#34;&gt;在管理员中修改poll应用&lt;/h2&gt;&#xA;&lt;p&gt;在默认管理员界面中我们看不到我们的poll应用。我们需要高速管理员Question对象具有一个管理员接口，打开&lt;code&gt;polls/admin.py&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.contrid import admin&#xA;from .models import Question&#xA;admin.site.register(Question)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;定制管理员表单&#34;&gt;定制管理员表单&lt;/h2&gt;&#xA;&lt;p&gt;现在我们来开始定制管理员表单，打卡&lt;code&gt;polls/admin.py&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.contrib import admin&#xA;from .models import Question,Choice&#xA;//Register your models here.&#xA;&#xA;class ChoiceInline(admin.TabularInline):&#xA;    model = Choice&#xA;    extra = 3&#xA;&#xA;class QuestionAdmin(admin.ModelAdmin):&#xA;    #fields = [&amp;#39;pub_date&amp;#39;,&amp;#39;question_text&amp;#39;]&#xA;    list_display = (&amp;#39;question_text&amp;#39;,&amp;#39;pub_date&amp;#39;,&amp;#39;was_published_recently&amp;#39;)&#xA;    list_filter = [&amp;#39;pub_date&amp;#39;]&#xA;    search_fields = [&amp;#39;question_text&amp;#39;]&#xA;    fieldsets = [&#xA;        (None,{&amp;#39;fields&amp;#39;:[&amp;#39;question_text&amp;#39;]}),&#xA;        (&amp;#39;Date information&amp;#39;,{&amp;#39;fields&amp;#39;:[&amp;#39;pub_date&amp;#39;],&amp;#39;classes&amp;#39;:[&amp;#39;collapse&amp;#39;]}),&#xA;    ]&#xA;    inlines = [ChoiceInline]&#xA;&#xA;admin.site.register(Question,QuestionAdmin)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里面他做了很多细节的改变，他是一个个的加进去，好麻烦，我这给的就是最终的一个版本，主要里面增加一个收缩的功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Django学习——开发你的第一个Django应用1</title>
      <link>https://madneal.com/post/django%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAdjango%E5%BA%94%E7%94%A81/</link>
      <pubDate>Sat, 10 Oct 2015 16:39:31 +0000</pubDate>
      <guid>https://madneal.com/post/django%E5%AD%A6%E4%B9%A0%E5%BC%80%E5%8F%91%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAdjango%E5%BA%94%E7%94%A81/</guid>
      <description>&lt;p&gt;突然对Django热情似火，所以就开学习了，我是根据官方文档学习的，所以我打算把官方文档翻译一遍，全当学习，首先贴官方文档的地址：https://docs.djangoproject.com/en/1.8/intro/tutorial01/。我是根据我自己的理解翻译，可能和官方有一些差入，如有不当之处，还望指正。&#xA;首先请确保你已经安装了python,Django是建立在python的基础之上，所以首先要安装python,mac上面的这些安装都比较简单，用pip 就可以了。下面就开始来创建项目吧&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建一个项目&#34;&gt;创建一个项目&lt;/h2&gt;&#xA;&lt;p&gt;进入到一个文件件下来创建你自己的项目，文件夹路径看你自己喜欢了，运行以下命令&#xA;&lt;code&gt;django-admin statrtproject mysite&lt;/code&gt;&#xA;这就将会产生一个mysite文件夹，这个文件夹的名字可以随便定义的，没有什么影响。让我们一起看看产生了什么：&#xA;&lt;code&gt;mysite/ manage.py mysite/ __init__.py settings.py urls.py wsgi.py &lt;/code&gt;&#xA;关于这些文件的详细内容我就不一一介绍了，可以进入文件夹看看，下面还会提到这些文件的用法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;建立数据库&#34;&gt;建立数据库&lt;/h2&gt;&#xA;&lt;p&gt;好现在打开&lt;code&gt;mysite/settings.py&lt;/code&gt;。默认来说的配置是使用SQLite数据库，这是一种轻量级的数据库，在手机上面使用的还是蛮多的，感兴趣的同学可以去查一查。SQLite是包括在python之中的，所以你也不需要另外去安装了，同时你也可以使用其他的数据库，不过要改一下配置文件。如果对数据库有更多的想法可以去https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-DATABASES里 main有关于数据库配置更为详细的介绍。&#xA;同时注意INSTALLED_APPS设置这个文件的顶层。一般来说INSTALLED_APPS 包含一下apps:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;django.contrib.admin&lt;/li&gt;&#xA;&lt;li&gt;django.contrib.auth&lt;/li&gt;&#xA;&lt;li&gt;django.contrib.contenttypes&lt;/li&gt;&#xA;&lt;li&gt;django.contrib.sessions&lt;/li&gt;&#xA;&lt;li&gt;django.contrib.messages&lt;/li&gt;&#xA;&lt;li&gt;django.contrib.staticfiles&#xA;这些应用的具体功能我就不一一介绍，反正就是为了配置更方便，到时还会用到。上面的这些应用可能会用到数据库中的表格，所以在应用他们以前我们要创建这些表格：&#xA;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;开发服务器&#34;&gt;开发服务器&lt;/h2&gt;&#xA;&lt;p&gt;让我们看一下我们的项目能否正常工作，切换到mysite文件夹下，运行命令行：&#xA;&lt;code&gt;python manage.py runserver&lt;/code&gt;&#xA;然后就可以看到服务器正常运行的一些提示信息了&lt;/p&gt;&#xA;&lt;h2 id=&#34;创建模型&#34;&gt;创建模型&lt;/h2&gt;&#xA;&lt;p&gt;创建你自己的应用，确定你是在和&lt;code&gt;manage.py&lt;/code&gt;同一及的文件路径下，运行命令行：&#xA;&lt;code&gt;python manage.py startapp polls&lt;/code&gt;&#xA;这回创建一个&lt;code&gt;polls&lt;/code&gt;文件件：&#xA;&lt;code&gt;polls/ __init__.py admin.py migrations/ __init__.py models.py tests.py views.py &lt;/code&gt;&#xA;在web应用中创建数据库的第一步是定义你自己的模型。&#xA;在我们这个简单的应用中，我们会创建两个模型&lt;code&gt;Question Choice&lt;/code&gt;&#xA;编辑&lt;code&gt;polls/models.py&lt;/code&gt;文件：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.db import models&#xA;class Question(models.Model):&#xA;    question_text = models.CharField(max_length=200)&#xA;    pub_date = models.DateTimeField(&amp;#39;date published&amp;#39;)&#xA;class Choice(models.Model):&#xA;    question = models.ForeignKey(Question)&#xA;    choice_text = models.CharField(max_length=200)&#xA;    votes = models.IntegerField(default=0)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上代码很直接明了，python的代码还是比较容易理解的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>全栈开发系列学习2——django项目搭建</title>
      <link>https://madneal.com/post/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A02django%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Sat, 10 Oct 2015 11:16:11 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A02django%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;p&gt;项目代码：http://yunpan.cn/cHajgT4HvgHqx （提取码：8350）&#xA;配置项目：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;首先确保你的机器安装了python和pip，这两种安装比较简单，这里就不说了。&lt;/li&gt;&#xA;&lt;li&gt;在你的机器上安装mysql服务，这个也不细说了。然后安装Mysql-python,只要输入命令&amp;quot;pip install MySQL-python&amp;quot;就可以了。&lt;/li&gt;&#xA;&lt;li&gt;解压项目文件代码。&lt;/li&gt;&#xA;&lt;li&gt;进入src文件夹下，输入&amp;quot;make install&amp;quot;这样会自动安装所有的依赖库。&lt;/li&gt;&#xA;&lt;li&gt;现在我们可以创建一个数据库：web_dev_tutorial&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mysql -u &amp;lt;your username&amp;gt; -p&amp;lt;yourpassword&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意用户名前面有空格，而密码前面是没有空格的，这一点格外注意。&#xA;在数据库中创建实例：&#xA;&lt;code&gt;create database web_dev_tutorial&lt;/code&gt;&#xA;然后将数据库和我们的项目链接在一起，打开&lt;code&gt;src/web_dev_tutorial/settings.py&lt;/code&gt;找到以下配置&#xA;&lt;code&gt;DATABASES = { &#39;default&#39;: { &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;, &#39;NAME&#39;: &amp;quot;web_dev_tutorial&amp;quot;, &#39;USER&#39;: &#39;root&#39;, &#39;PASSWORD&#39;: &#39;root&#39;, } }&lt;/code&gt;&#xA;把相应的用户名密码改成你的数据库的用户名密码就可以了。&#xA;6. 现在我们可以载入一些测试数据到数据库。检查data文件夹是否有个叫parse.py的文件，还有一个文件夹是rawdata，里面包含了很多的文本文件。进入文件夹test，打开一个叫做config.py的文件，你会看到以下内容&#xA;`&#xA;MYSQL_HOST     = &amp;lsquo;127.0.0.1&amp;rsquo;&#xA;MYSQL_PORT     = 3306&lt;/p&gt;&#xA;&lt;p&gt;MYSQL_USERNAME = &amp;lsquo;root&amp;rsquo;&#xA;MYSQL_PASSWORD = &amp;lsquo;root&amp;rsquo;&lt;/p&gt;&#xA;&lt;p&gt;MYSQL_DB_NAME  = &amp;lsquo;web_dev_tutorial&amp;rsquo;&#xA;&lt;code&gt; 同样把数据库用户名密码改成你相应的用户名密码就可以了。接着，在文件夹test下，输入&lt;/code&gt;make load`会自动擦除文本文件，并保存结果，这些结果也会被载入到数据库中。&#xA;7. 在文件夹src下，输入&amp;quot;make&amp;quot;,你将会看到：&#xA;｀&#xA;MYSQL_HOST     = &amp;lsquo;127.0.0.1&amp;rsquo;&#xA;MYSQL_PORT     = 3306&lt;/p&gt;&#xA;&lt;p&gt;MYSQL_USERNAME = &amp;lsquo;root&amp;rsquo;&#xA;MYSQL_PASSWORD = &amp;lsquo;root&amp;rsquo;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
