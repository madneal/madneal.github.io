<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书笔记 on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 读书笔记 on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sat, 14 Nov 2015 12:08:09 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>剑指offer学习读书笔记--二维数组中的查找</title>
      <link>https://madneal.com/post/%E5%89%91%E6%8C%87offer%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Sat, 14 Nov 2015 12:08:09 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%89%91%E6%8C%87offer%E5%AD%A6%E4%B9%A0%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0--%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <description>&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都是按照从上到下递增的顺序排序。请设计一个函数，输入这样的一个二维数组和一个整数，判断数组是否含有这个整数。&#xA;1&#x9;&#x9;2&#x9;&#x9;8&#x9;&#x9;9&#xA;2&#x9;&#x9;4&#x9;&#x9;9&#x9;&#x9;12&#xA;4&#x9;&#x9;7&#x9;&#x9;10&#x9;&#x9;13&#xA;6&#x9;&#x9;8&#x9;&#x9;11&#x9;&#x9;15&#xA;我们可以发现以下规律：首先选取数组右上角的数字。如果这个数字是要寻找的数字，则返回结果。若这个数字大于我们要寻找的数字，则去除这个数字所在的列；若这个数字小于我们要寻找的数字，则去除这个数字所在的行。也就是说如果查找的数字不在数组的右上角，则每一次都在数组查找范围中剔除一行或者一列，这样每一步都可以缩小查找的范围了，直到找到需要查找的数字或者查找的范围为空。&lt;/p&gt;&#xA;&lt;p&gt;从另外一个角度看，从左下角的数字来看，如果这个数字大于查找的数字，则剔除该行，若这个数字小于查找的数字，则剔除该列。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bool Find(int* matrix,int rows,int cols,int num)&#xA;{&#xA;&#x9;bool found = false;&#xA;&#x9;if (matrix != null &amp;amp;&amp;amp; rows &amp;gt; 0 &amp;amp;&amp;amp; cols &amp;gt; 0)&#xA;&#x9;{&#xA;&#x9;&#x9;int row = 0;&#xA;&#x9;&#x9;int col = cols - 1;&#xA;&#x9;&#x9;while(row &amp;lt; rows &amp;amp;&amp;amp; col &amp;gt;= 0)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (matrix[row*cols + col] == num)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;found = true;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if(matrix[row*cols + col] &amp;gt; num)&#xA;&#x9;&#x9;&#x9;-- col;&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;++ row;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return found;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
