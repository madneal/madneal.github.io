<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>架构 on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/%E6%9E%B6%E6%9E%84/</link>
    <description>Recent content in 架构 on Neal&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Wed, 26 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://madneal.com/tags/%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>寻找你的第一个漏洞</title>
      <link>https://madneal.com/post/%E5%AF%BB%E6%89%BE%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://madneal.com/post/%E5%AF%BB%E6%89%BE%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%BC%8F%E6%B4%9E/</guid>
      <description> 最近 Burp Suite 社区有在收集赏金猎人对于新手的一些建议。其实，相对于国外来说，国内的白帽子的生存环境还是比较恶劣的，和国外相比，国内的白帽子的生存环境还需要进一步提高。如果想全职在中国做一名白帽子还是比较困难的，但国外全职的白帽子就比较多。自己其实在安全方面也不能算老手，之前也不是做安全挖洞出身的。自己当初第一个提交给 SRC 的漏洞还是在内网做代码审计发现的开源框架的 XSS 漏洞，当初是阿里和大众点评各一个。虽然漏洞不值钱，但当时还是比较开心的。后面也都是偶然发现的一些信息泄露，SRC 的项目也没怎么做过，不敢和那些挖洞大佬比。他们收集的一些建议我觉得有的还是非常有价值的，而且 Burp Suite 社区真的算是业界良心，且不说 Burp 作为每个安全工程师必备工具之一，他们出品的 Web Security Acedemy 简直就是业界良心，这么优秀的应用安全学习资源，居然还免费！！！
理解过程 脚本小子一时爽，一直当，一直爽。这个其实不一定是好的，对于新手来说，建议可以关注一种漏洞类型，然后深入挖掘，并且可以在一些项目中尝试去挖掘。
@0x1ntegral
  专注某种特性类型漏洞 阅读这种漏洞类型的报告 在项目中寻找这种类型漏洞 当你找到一个漏洞，更改漏洞类型并重复步骤 1   @Troll_13
 不要把事情过度复杂化。可以先做一些容易理解的，即使你的第一份漏洞赏金比较少，后面比较多的赏金会让你更开心。
 探寻未知领域 这其实是一个对于挖掘漏洞的一个比较通用的建议，一般来说，特别老的应用或者特别新的应用都是比较容易挖到漏洞的。往往有些老的应用，经常会有一些地方会被忽视掉。
永远不要停止学习 不管你是做安全还是做开发，学习对于你来说，是永远都不能丢掉的。坚持这一点可以让你在技术的世界走得更远。
@root4loot
 多读文章
 @shail_official
 读代码，先专注于公开的部分。阅读单元测试。
坚持尝试，不要停止。使用 burp 去现实世界中挖掘漏洞。Apache 的一系列漏洞，配置错误，反射型 XSS 以及敏感信息泄露。
 总结 对于安全的技术学习，实践往往非常重要。所以向 Web Security Academy, Penteserlab, Hack the Box，这种平台都非常有意义。对于挖漏洞这件事情来说，如果作为全职职业的确非常困难，但它却是安全行业的找工作里面一个非常重要的门槛。尽管我自己也是挖漏洞也很菜，希望自己以后也可以多花点时间放在这一方面，能多挖些漏洞。实在不行，混个月饼呗。
Reference  https://portswigger.net/blog/finding-your-first-bug-bounty-hunting-tips-from-the-burp-suite-community  </description>
    </item>
    
    <item>
      <title>全栈工程师的成长</title>
      <link>https://madneal.com/%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://madneal.com/%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF/</guid>
      <description>三年之前，我写过一篇菜鸟程序猿成长史。当时我还是一名踌躇满志的前端开发，立志要在前端领域大展拳脚。当时，前端中的开发最乐此不疲的事就是为了哪个框架最优秀而天天打口水仗。三年过去了，我已经不再是一名前端工程师，变成了一名偶尔怼人和被怼的安全工程师。工作这几年，不管还是在技术学习上，还是工作上，作为一名立志成为一名全栈工程师的人，也分享一下这几年的一些经验。
软技能篇 这里的软技能篇我指的是一些基础技能，可能这些技能不是能够在很短时间内养成，可能需要一年甚至更长的时间。在我技术学习和实践的过程中，我觉得有个词是非常重要的，即阅读和实践。阅读掌握理论知识，实践让你熟悉技能，掌握技能。其实不管是做开发和做安全，都是一门技术活，和其它的技术工种从本质上来说没有太大的区别，当然天才型选手除外。对于阅读来说，我觉得英语是非常重要的。因为不得不承认，大部分最优秀的技术知识都是通过英语传播的，通过英语，你可以看多更原汁原味的技术文章，国内某些翻译的书籍有时候真的是有点惨不忍睹。另外，往往通过英文关键字也可能更容易找到问题的答案。现在大多数的技术问题，互联网上早就有类似的解决方案，问题是如何正确地检索到。
坚持，也是做技术的一个比较重要的品质。因为，在我们平常工作的过程中，问题往往不是一下子就能够找到。很多问题需要一直坚持，一直摸索，突然有天拍脑袋说我咋没想到这点。</description>
    </item>
    
    <item>
      <title>架构整洁之道读后感</title>
      <link>https://madneal.com/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://madneal.com/%E6%9E%B6%E6%9E%84%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
      <description>之前度过这本书作者之前的《代码整洁之道》，学习了一些概念。但是这本书相对于那本书阅读更加容易理解，感觉收益也更大，对于有些东西，有一种茅塞顿开的感觉。软件架构不是像做菜一样，这个加一点，那个加一点，在一起炒一炒就可以了。架构更像是乐高玩具，可以自由组合，是结构化的，层次化的，模块之间是可以独立存在的。我感觉自己以前在写代码的时候有一些疑惑，在这里找到了答案，同时也学会了以后写代码更应该注意到哪些方面。这本书里面有一些很好的观点，想分享给大家。
框架是个好东西，但你不能依赖它 现在，无论是在前端开发亦或是后端开发以及其它领域，框架的使用已经屡见不鲜。网上也经常有为了哪种框架更优秀而爆发的各种激烈的争论。比如，之前前端框架的 Vue 与 Angular 之争闹得沸沸扬扬，总是有人为了框架的孰优孰劣而喋喋不休。正如书中所说，“框架是工具而不是生活信念”。很显然，框架已经成为了不少人的生活新信念，他们为此乐此不疲地争论着，他们似乎就是要为他们的信念而战斗。诚然，框架为了我们日常的开发带来了巨大的便利。但不可否认的是，框架中解决的问题和概念是依赖于框架的开发者，而不是仅仅针对于你一人。因此，如果你是用的框架，明天开始就不会再维护，那不应该是你的世界末日。框架可以帮助我有效地进行开发，而不是开发依赖于某个框架。这就好比与讨论 golang，java 或者 python 哪一种语言更优秀。我认为这种讨论都是无意义的，任何语言都是有它自己的应用场景的，所以没必要没要说出哪个语言就是最优秀的。
编程范式 主要是三个编程范式，即结构化编程、面向对象编程以及函数式编程。结构化编程是对程序控制权的直接转移的限制。面向对象编程对程序控制权的间接转移的限制。函数式编程是对程序中赋值操作的限制。这里面提到一些有意思的点，封装不仅仅是面向对象编程的特性，C 语言也可以做封装，而且往往做得还很不错。尽管函数式编程最近才名声大噪，但是它确实最早被发明的。另外一点我们需要意识的是，软件构建并没有发生本质的变化，今天的软件构建规则和 1946 年图灵写下电子计算机的第一行代码其实是一样的，虽然语言变化了，硬件的性能变化了，但是软件编程的核心并没有发生变化。
架构师也写代码 很多人对于架构师可能有一种误解，认为架构师高高在上，只要对于项目的框架做一些设计，并不会具体去写代码。但是实际上，架构师实际上就应该还是一个保持 coding 的码农。“软件架构师其实应该是能力最强的一群程序员，他们通常会在自身承接变成任务的同时，逐渐引导整个团队向一个能够最大化生产力方向前进。也许软件架构师成产的代码量不是最多的，但是他们必须不停地承接编程任务。如果不亲身承受因系统设计而带来的麻烦，就体会不到设计不佳所带来的痛苦，接着就会逐渐迷失正确的设计方向。”可以看出软件架构师并不是高高在上，指指点点，他们需要亲自体会糟糕的系统带来的痛苦，他才知道如何去改进。</description>
    </item>
    
  </channel>
</rss>