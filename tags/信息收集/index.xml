<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>信息收集 on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</link>
    <description>Recent content in 信息收集 on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sat, 17 Apr 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>多平台的敏感信息检测工具-GShark</title>
      <link>https://madneal.com/post/gshark/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/gshark/</guid>
      <description>&lt;p&gt;GShark has beem maintained for alomost two years as an open source sensitive infomation detection tool. This tool is utilized in my own company and sparetime, multi information sensi&lt;/p&gt;&#xA;&lt;p&gt;GShark 作为一款开源的敏感信息监测工具其实差不多维护也有两年多的时间。这款产品其实笔者在自己的公司或者平常都在使用，也通过这个工具发现多多起内部的信息泄露事件以及外部的一些的信息泄露事件。其实这种类似的开源工具数不胜数，大家的核心功能其实就是监控 Github 上面的信息，但是笔者要想把这种产品做得更好一点，就要从功能性、易用性角度来做进一步拓展。最近，对 &lt;a href=&#34;https://github.com/madneal/gshark&#34;&gt;GShark&lt;/a&gt; 做了较大的重构，前后端都完成了比较大的重构，之前老的版本也有写过&lt;a href=&#34;https://mp.weixin.qq.com/s/rKdz9V1Vx548FvPHwNBn0Q&#34;&gt;文章&lt;/a&gt;介绍，所以关于这个工具的起源就不多介绍了，主要对这次重构和新的架构做介绍。&lt;/p&gt;&#xA;&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;&#xA;&lt;p&gt;目前 GShark 已经是一个前后端分离的项目，之前因为前端通过后端模板直接渲染的，所以在前端的功能性以及美观性都会差很多。新的重构是基于 &lt;a href=&#34;https://github.com/flipped-aurora/gin-vue-admin&#34;&gt;gin-vue-admin&lt;/a&gt;，技术栈是后端通过 gin 实现，前端通过 vue-elemment 来实现。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12164075/114326875-58e1da80-9b69-11eb-82a5-b2e3751a2304.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以架构主要就分为前端和后端两个部分，而后端则分为 web 服务以及敏感信息的扫描服务。新的架构具有以下特点：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;细粒度的权限控制，更好的安全性，包括菜单的权限设置以及 API 的权限设置&lt;/li&gt;&#xA;&lt;li&gt;丰富的前端功能，CRUD 更简单&lt;/li&gt;&#xA;&lt;li&gt;搜索源和之前保持一致，支持 github, gitlab 以及 searchcode&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;部署&#34;&gt;部署&lt;/h2&gt;&#xA;&lt;p&gt;之前就有想使用 &lt;a href=&#34;https://github.com/madneal/gshark&#34;&gt;GShark&lt;/a&gt; 的同学来和我反映，其实之前的编译就已经很简单了。但是因为有些人不太熟悉 go，所以觉得编译还是有一些问题。这一次，笔者专门写了一个脚本来发布三个操作系统下的工具包，所以直接使用即可，开箱即用，即使你不安装 go 也无所谓。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rm -rf ./releases/*&#xA;cd web&#xA;npm run build&#xA;cd ../&#xA;&#xA;# build for mac&#xA;cd server&#xA;GOOS=darwin GOARCH=amd64 go build &#xA;cd ../releases&#xA;mkdir gshark_darwin_amd64&#xA;cd gshark_darwin_amd64&#xA;mv ../../server/gshark .&#xA;cp -rf ../../server/resource .&#xA;cp ../../server/config-temp.yaml config.yaml&#xA;cd ../../&#xA;cp -rf ./web/dist ./releases/gshark_darwin_amd64&#xA;7z a -r ./releases/gshark_darwin_amd64.zip ./releases/gshark_darwin_amd64/&#xA;&#xA;# build for windows&#xA;cd server&#xA;GOOS=windows GOARCH=amd64 go build&#xA;cd ../releases&#xA;mkdir gshark_windows_amd64&#xA;cd gshark_windows_amd64&#xA;mv ../../server/gshark.exe .&#xA;cp -rf ../../server/resource .&#xA;cp ../../server/config-temp.yaml config.yaml&#xA;cd ../../&#xA;cp -rf ./web/dist ./releases/gshark_windows_amd64&#xA;7z a -r ./releases/gshark_windows_amd64.zip ./releases/gshark_windows_amd64/&#xA;&#xA;# build for linux&#xA;cd server&#xA;GOOS=linux GOARCH=amd64 go build -o gshark&#xA;cd ../releases&#xA;mkdir gshark_linux_amd64&#xA;cd gshark_linux_amd64&#xA;mv ../../server/gshark .&#xA;cp -rf ../../server/resource .&#xA;cp ../../server/config-temp.yaml config.yaml&#xA;cd ../../&#xA;cp -rf ./web/dist ./releases/gshark_linux_amd64&#xA;7z a -r ./releases/gshark_linux_amd64.zip ./releases/gshark_linux_amd64&#xA;&#xA;&#xA;rm -rf ./releases/gshark*/&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个是 build 的脚本，主要是实现跨平台的编译并且将前端文件夹打包进去，然后拿到这个安装包解压即可使用。目前 GShark 的发布应该只需要两个前提条件：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
