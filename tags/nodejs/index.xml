<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nodejs on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/nodejs/</link>
    <description>Recent content in Nodejs on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sun, 12 Nov 2017 17:12:53 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>出去就餐并且理解Express.js的基本知识</title>
      <link>https://madneal.com/post/%E5%87%BA%E5%8E%BB%E5%B0%B1%E9%A4%90%E5%B9%B6%E4%B8%94%E7%90%86%E8%A7%A3express.js%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 12 Nov 2017 17:12:53 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%87%BA%E5%8E%BB%E5%B0%B1%E9%A4%90%E5%B9%B6%E4%B8%94%E7%90%86%E8%A7%A3express.js%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/11520/1*iMkFu1T52fkSnlZDlCrvkQ.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;going-out-to-eat-and-understanding-the-basics-of-expressjs出去就餐并且理解expressjs的基本知识&#34;&gt;Going out to eat and understanding the basics of Express.js出去就餐并且理解Express.js的基本知识&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://medium.freecodecamp.org/going-out-to-eat-and-understanding-the-basics-of-express-js-f034a029fb66&#34;&gt;Going out to eat and understanding the basics of Express.js&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/neal1991&#34;&gt;neal1991&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/neal1991&#34;&gt;articles-translator &lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果你曾经去过一个坐下来就餐的餐厅，那么你可以了解 Express 的基础知识。 但是，如果你刚刚开始构建你的第一个 Node.js 后端&amp;hellip;&amp;hellip;你可能并不会很顺利。&lt;/p&gt;&#xA;&lt;p&gt;是的 - 如果你曾经有过 JavaScript 经验，学习 Node 肯定更容易。 但是，在构建后端时面临的挑战与在前端使用JavaScript 时所面临的挑战完全不同。&lt;/p&gt;&#xA;&lt;p&gt;当我学习Node时，我选择了困难的方式。 我一遍又一遍地学习电子书，写作教程和视频，直到我终于明白我&lt;strong&gt;为什么&lt;/strong&gt;要做我正在做的事情。&lt;/p&gt;&#xA;&lt;p&gt;有一个更简单的方法。 我打算用一个餐馆的比喻来解释你的第一个应用程序的四个关键部分。 &lt;a href=&#34;https://expressjs.com/&#34;&gt;Express.js&lt;/a&gt; 是一个组织你的代码的流行框架，我会为任何初学者推荐它。 稍后我会进一步解释。&lt;/p&gt;&#xA;&lt;p&gt;下面是我们将会涉及到的四个关键部分：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The require statements&lt;/li&gt;&#xA;&lt;li&gt;Middleware&lt;/li&gt;&#xA;&lt;li&gt;Routing&lt;/li&gt;&#xA;&lt;li&gt;App.listen()/ Starting the server&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在这个比喻中，你是一个餐馆老板，希望雇用一个总经理 - 创建所有流程并且进行管理，这样餐厅就可以顺利运行，客户也就快乐了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mongoose中document和object的区别</title>
      <link>https://madneal.com/post/mongoose%E4%B8%ADdocument%E5%92%8Cobject%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/mongoose%E4%B8%ADdocument%E5%92%8Cobject%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;p&gt;这个问题其实是mongoose非常常见的问题，经常有很多以前没遇到这个问题的人都会被这个问题弄得怀疑人生。我们先介绍一些问题的背景。先看下面一段代码：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// res.render(&amp;#39;index&amp;#39;, { title: &amp;#39;Express&amp;#39; });&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mongoose&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;realestate&amp;#39;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;queryCretia&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;model&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;queryCretia&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;docs&lt;/span&gt;) =&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;render&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;index&amp;#39;&lt;/span&gt;, {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;docs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;docs&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  })&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-ejs&#34; data-lang=&#34;ejs&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;  &amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;&amp;lt;%= title %&amp;gt;&amp;lt;/title&amp;gt;&#xA;    &amp;lt;link rel=&amp;#39;stylesheet&amp;#39; href=&amp;#39;/stylesheets/style.css&amp;#39; /&amp;gt;&#xA;  &amp;lt;/head&amp;gt;&#xA;  &amp;lt;body&amp;gt;&#xA;    &amp;lt;h1&amp;gt;&amp;lt;%= title %&amp;gt;&amp;lt;/h1&amp;gt;&#xA;    &amp;lt;p&amp;gt;Welcome to &amp;lt;%= title %&amp;gt;&amp;lt;/p&amp;gt;&#xA;    &amp;lt;!-- &amp;lt;%= docs %&amp;gt; --&amp;gt;&#xA;    &amp;lt;ul&amp;gt;&#xA;      &amp;lt;% docs.forEach(function(doc){ %&amp;gt;&#xA;      &amp;lt;li&amp;gt;&amp;lt;%= doc.type %&amp;gt;&amp;lt;/li&amp;gt;&#xA;      &amp;lt;% }) %&amp;gt;&#xA;    &amp;lt;/ul&amp;gt;&#xA;  &amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在第一段代码中，通过&lt;code&gt;model.find&lt;/code&gt;我们应该能够获取到根据&lt;code&gt;queryCriteria&lt;/code&gt;获取的结果，结果应该是一个对象数组，类似于这样：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[{&#xA;    &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;59bdeadb2a5c612514ee7970&amp;#34;),&#xA;    &amp;#34;title&amp;#34; : &amp;#34;好楼层，中等装修，满5年，上门实拍&amp;#34;,&#xA;    &amp;#34;type&amp;#34; : &amp;#34;2室1厅&amp;#34;,&#xA;    &amp;#34;square&amp;#34; : &amp;#34;75.42平&amp;#34;,&#xA;    &amp;#34;direction&amp;#34; : &amp;#34;朝南&amp;#34;,&#xA;    &amp;#34;floor&amp;#34; : &amp;#34;中区/6层&amp;#34;,&#xA;    &amp;#34;unitPrice&amp;#34; : 47732,&#xA;    &amp;#34;totalPrice&amp;#34; : 360,&#xA;    &amp;#34;location&amp;#34; : null,&#xA;    &amp;#34;specialExplain&amp;#34; : &amp;#34;满五&amp;#34;,&#xA;    &amp;#34;url&amp;#34; : &amp;#34;http://sh.lianjia.com//ershoufang/sh4528035.html&amp;#34;,&#xA;    &amp;#34;station&amp;#34; : &amp;#34;江杨北路&amp;#34;,&#xA;    &amp;#34;line&amp;#34; : &amp;#34;3号线&amp;#34;,&#xA;    &amp;#34;updateTime&amp;#34; : &amp;#34;2017-09-17 11:24:11&amp;#34;&#xA;}&#xA;{&#xA;    &amp;#34;_id&amp;#34; : ObjectId(&amp;#34;59bdeadb2a5c612514ee7971&amp;#34;),&#xA;    &amp;#34;title&amp;#34; : &amp;#34;南北户型，厨卫全明，高区采光好，装修精美&amp;#34;,&#xA;    &amp;#34;type&amp;#34; : &amp;#34;2室2厅&amp;#34;,&#xA;    &amp;#34;square&amp;#34; : &amp;#34;90.92平&amp;#34;,&#xA;    &amp;#34;direction&amp;#34; : &amp;#34;朝南北&amp;#34;,&#xA;    &amp;#34;floor&amp;#34; : &amp;#34;高区/6层&amp;#34;,&#xA;    &amp;#34;unitPrice&amp;#34; : 46194,&#xA;    &amp;#34;totalPrice&amp;#34; : 420,&#xA;    &amp;#34;location&amp;#34; : null,&#xA;    &amp;#34;specialExplain&amp;#34; : &amp;#34;满五&amp;#34;,&#xA;    &amp;#34;url&amp;#34; : &amp;#34;http://sh.lianjia.com//ershoufang/sh4546221.html&amp;#34;,&#xA;    &amp;#34;station&amp;#34; : &amp;#34;江杨北路&amp;#34;,&#xA;    &amp;#34;line&amp;#34; : &amp;#34;3号线&amp;#34;,&#xA;    &amp;#34;updateTime&amp;#34; : &amp;#34;2017-09-17 11:24:11&amp;#34;&#xA;}]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;预期&lt;code&gt;index.ejs&lt;/code&gt;应该渲染的页面是一个ul渲染的结果，类似于&lt;/p&gt;</description>
    </item>
    <item>
      <title>moongoose对象无法新增删除属性</title>
      <link>https://madneal.com/post/moongoose%E5%AF%B9%E8%B1%A1%E6%97%A0%E6%B3%95%E6%96%B0%E5%A2%9E%E5%88%A0%E9%99%A4%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 30 Jun 2016 21:40:33 +0000</pubDate>
      <guid>https://madneal.com/post/moongoose%E5%AF%B9%E8%B1%A1%E6%97%A0%E6%B3%95%E6%96%B0%E5%A2%9E%E5%88%A0%E9%99%A4%E5%B1%9E%E6%80%A7/</guid>
      <description>&lt;p&gt;昨天用nodes中的moongoose去查询一个结果遇到一个大坑，这个坑貌似用moongoose可能会遇到。背景是这样的，我在nodejs中去查询document，得到的可以看作是一个对象list。在这个结果集中，我要去寻找这个结果中的某个属性是否和其他的结果重复，并给它添加一个属性作为标志。举例子，我们获得的结果就像是&lt;code&gt;[{name:&#39;neal&#39;,age:&#39;18&#39;},{name:&#39;neal&#39;,age:&#39;19&#39;}]&lt;/code&gt;,&#xA;我希望把它变成&lt;code&gt;[{name:&#39;neal&#39;,age:&#39;18&#39;,flag:true},{name:&#39;neal&#39;,age:&#39;19&#39;,flag:true}]&lt;/code&gt;。奇怪的事情发生了，我无法在这些对象中新增这个flag属性，这肿么可能。我尝试各种方法，但是还是存不进去。&#xA;后来去stack overflow一查，发觉居然是mongoose  的问题。。。。我压根没有想过是mongoose的问题。原来mongoose是ODM(object document mapper)，类似于操作关系型数据库的ORM,我们使用mongoose取到的数据结构依赖我们定义的schema结构，因为我们当初没有定义flag属性，所以最终返回的结果就没有这个属性了。&#xA;这个问题应该也有很多解决方法，这里就说一下我看到的一些方法。比如事先在schema增加这个属性，但是我觉得有时候就是不想定义这个属性才在后面加的；还有一个就是把返回的结果用toObject()方法进行转化，这样就可以像普通的对象一样增加属性了；其实本质的原因似乎是document .toObjet()里面需要一个vituals :true 的属性来实现，而默认的是false。可能我说的还不是特别透彻，可以去看一下官方的api &lt;a href=&#34;http://mongoosejs.com/docs/api.html#document_Document-toObject&#34;&gt;http://mongoosejs.com/docs/api.html#document_Document-toObject&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>nodejs回调大坑</title>
      <link>https://madneal.com/post/nodejs%E5%9B%9E%E8%B0%83%E5%A4%A7%E5%9D%91/</link>
      <pubDate>Wed, 27 Apr 2016 08:57:52 +0000</pubDate>
      <guid>https://madneal.com/post/nodejs%E5%9B%9E%E8%B0%83%E5%A4%A7%E5%9D%91/</guid>
      <description>&lt;p&gt;最近看到nodejs，因为有一个处理里面有好几个异步操作，调入回调大坑，不禁觉得很恶心，真的很讨厌发明这种写法的人，简直反社会！！！遂转载一篇解坑的文章，原文地址：http://www.infoq.com/cn/articles/nodejs-callback-hell/。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;Node.js需要按顺序执行异步逻辑时一般采用后续传递风格，也就是将后续逻辑封装在回调函数中作为起始函数的参数，逐层嵌套。这种风格虽然可以提高CPU利用率，降低等待时间，但当后续逻辑步骤较多时会影响代码的可读性，结果代码的修改维护变得很困难。根据这种代码的样子，一般称其为&amp;quot;callback hell&amp;quot;或&amp;quot;pyramid of doom&amp;quot;，本文称之为回调大坑，嵌套越多，大坑越深。&#xA;坑的起源&lt;/p&gt;&#xA;&lt;p&gt;后续传递风格&lt;/p&gt;&#xA;&lt;p&gt;为什么会有坑？这要从后续传递风格（continuation-passing style&amp;ndash;CPS)说起。这种编程风格最开始是由Gerald Jay Sussman和Guy L. Steele, Jr. 在AI Memo 349上提出来的，那一年是1975年，Schema语言的第一次亮相。既然JavaScript的函数式编程设计原则主要源自Schema，这种风格自然也被带到了Javascript中。&lt;/p&gt;&#xA;&lt;p&gt;这种风格的函数要有额外的参数：“后续逻辑体”，比如带一个参数的函数。CPS函数计算出结果值后并不是直接返回，而是调用那个后续逻辑函数，并把这个结果作为它的参数。从而实现计算结果在逻辑步骤之间的传递，以及逻辑的延续。也就是说如果要调用CPS函数，调用方函数要提供一个后续逻辑函数来接收CPS函数的“返回”值。&#xA;回调&lt;/p&gt;&#xA;&lt;p&gt;在JavaScript中，这个“后续逻辑体”就是我们常说的回调(callback)。这种作为参数的函数之所以被称为回调，是因为它一般在主程序中定义，由主程序交给库函数，并由它在需要时回来调用。而将回调函数作为参数的，一般是一个会占用较长时间的异步函数，要交给另一个线程执行，以便不影响主程序的后续操作。如下图所示：&#xA;&lt;img src=&#34;http://img.blog.csdn.net/20160427082823559&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;下面一个例子说明回调样例的恶心之处：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module.exports = function (param, cb) {&#xA;  asyncFun1(param, function (er, data) {&#xA;    if (er) return cb(er);&#xA;    asyncFun2(data,function (er,data) {&#xA;      if (er) return cb(er);&#xA;      asyncFun3(data, function (er, data) {&#xA;        if (er) return cb(er);&#xA;        cb(data);&#xA;      })&#xA;    })&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;像function(er,data)这种回调函数签名很常见，几乎所有的Node.js核心库及第三方库中的CPS函数都接收这样的函数参数，它的第一个参数是错误，其余参数是CPS函数要传递的结果。比如Node.js中负责文件处理的fs模块，我们再看一个实际工作中可能会遇到的例子。要找出一个目录中最大的文件，处理步骤应该是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;用fs.readdir获取目录中的文件列表；&lt;/li&gt;&#xA;&lt;li&gt;循环遍历文件，获取文件的stat；&lt;/li&gt;&#xA;&lt;li&gt;找出最大文件；&lt;/li&gt;&#xA;&lt;li&gt;以最大文件的文件名为参数调用回调。&#xA;这些都是异步操作，但需要顺序执行，后续传递风格的代码应该是下面这样的：&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var fs = require(&amp;#39;fs&amp;#39;)&#xA;var path = require(&amp;#39;path&amp;#39;)&#xA;module.exports = function (dir, cb) {&#xA;  fs.readdir(dir, function (er, files) { // [1]&#xA;    if (er) return cb(er)&#xA;    var counter = files.length&#xA;    var errored = false&#xA;    var stats = []&#xA;    files.forEach(function (file, index) {&#xA;      fs.stat(path.join(dir,file), function (er, stat) { // [2]&#xA;        if (errored) return&#xA;        if (er) {&#xA;          errored = true&#xA;          return cb(er)&#xA;        }&#xA;        stats[index] = stat // [3]&#xA;        if (--counter == 0) { // [4]&#xA;          var largest = stats&#xA;            .filter(function (stat) { return stat.isFile() }) // [5]&#xA;            .reduce(function (prev, next) { // [6]&#xA;              if (prev.size &amp;gt; next.size) return prev&#xA;              return next&#xA;            })&#xA;          cb(null, files[stats.indexOf(largest)]) // [7]&#xA;        }&#xA;      })&#xA;    })&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对这个模块的用户来说，只需要提供一个回调函数function(er,filename)，用两个参数分别接收错误或文件名：&lt;/p&gt;</description>
    </item>
    <item>
      <title>nodejs爬虫编码问题</title>
      <link>https://madneal.com/post/nodejs%E7%88%AC%E8%99%AB%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sat, 16 Apr 2016 18:03:14 +0000</pubDate>
      <guid>https://madneal.com/post/nodejs%E7%88%AC%E8%99%AB%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;最近再做一个nodejs网站爬虫的项目，但是爬一些网站的数据出现了中文字符乱码的问题。查了一下，主要是因为不是所有的网站的编码格式都是utf-8,还有一些网站用的是gb2312或者gbk的编码格式。所以需要做一个处理来进行编码的解码。至于网站的编码怎么看，可以通过去检查中的network去看。&#xA;&lt;img src=&#34;http://img.blog.csdn.net/20160416170259695&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;根据相应的编码格式，进行相应的设置。utf-8就不要说了，下面就以gbk为例，说一下解码的方式。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var request = require(&amp;#39;request&amp;#39;);&#xA;var cheerio = request(&amp;#39;cheerio&amp;#39;);&#xA;var iconv = require(&amp;#39;iconv-lite&amp;#39;);&#xA;&#xA;request ({&#xA;&#x9;url : &amp;#39;http://www.taobao.com&amp;#39;,&#xA;&#x9;encodeing = null&#xA;&#x9;},function(err,res,body){&#xA;&#x9;if (err) throw err;&#xA;&#x9;// decode the content of the website&#xA;&#x9;body = iconv.decode(body,&amp;#39;gbk&amp;#39;);&#xA;&#xA;&#x9;var $ = cheerio.load(body);&#xA;&#xA;&#x9;console.log($(&amp;#39;head title&amp;#39;).text());&#xA;}）&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者是使用一个gbk包，但我觉得还是上面的方式比较好。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
