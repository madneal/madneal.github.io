<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微软 on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/%E5%BE%AE%E8%BD%AF/</link>
    <description>Recent content in 微软 on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sun, 07 Mar 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/tags/%E5%BE%AE%E8%BD%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微软开源对于 Solorigate 活动捕获的开源 CodeQL 查询</title>
      <link>https://madneal.com/post/ms-codeql/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/ms-codeql/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://www.microsoft.com/security/blog/2021/02/25/microsoft-open-sources-codeql-queries-used-to-hunt-for-solorigate-activity/&#34;&gt;微软 open sources CodeQL queries used to hunt for Solorigate activity&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/madneal&#34;&gt;madneal&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/madneal/articles-translator/&#34;&gt;articles-translator&lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;Solorigate 攻击的一个关键方面是供应链攻击，这使攻击者可以修改 SolarWinds Orion 产品中的二进制文件。这些经过修改的二进制文件是通过以前合法的更新渠道分发的，并允许攻击者远程执行恶意活动，例如窃取凭据，提权和横向移动，以窃取敏感信息。该事件提醒组织不仅要考虑是否准备好应对复杂的攻击，还需要考虑自己代码库的弹性。&lt;/p&gt;&#xA;&lt;p&gt;微软坚信以透明的方式进行领导并与社区共享情报，从而改善整个行业的安全实践和状况。在此博客中，我们将分享审查代码库的过程，重点介绍一种特定的技术：使用 &lt;a href=&#34;https://securitylab.github.com/tools/codeql&#34;&gt;CodeQL&lt;/a&gt; 查询来大规模分析我们的源代码，并排除存在代码级别的危威胁情报（IoCs）和与 Solorigate 相关的代码模式。我们正在将本次本调查中使用的 &lt;a href=&#34;https://github.com/github/codeql/pull/5083&#34;&gt;CodeQL 查询&lt;/a&gt;开源，以便其他组织可以执行类似的分析。请注意，我们在此博客中介绍的查询仅可用于查找与 Solorigate 植入程序中的源代码具有相似之处的源代码，无论是在语法元素（名称，字面量等）还是功能上。两者可能在良性代码中同时发生，因此所有发现都需要进行审查以确定它们是否可行。此外，不能保证恶意行为者在其他操作中被约束为相同的功能或编码风格，因此这些查询可能无法检测到与在 Solorigate 植入代码中看到的策略有明显差异的其他植入代码。这些应被视为只针对攻击&lt;a href=&#34;https://techcommunity.microsoft.com/t5/azure-sentinel/solarwinds-post-compromise-hunting-with-azure-sentinel/ba-p/1995095&#34;&gt;审计技术&lt;/a&gt;的一部分。&lt;/p&gt;&#xA;&lt;p&gt;长期以来，微软一直采用完整性控制来验证分发给我们的服务器和客户的最终编译二进制文件在开发和发布周期的任何时候都没有被恶意修改。例如，我们验证编译器生成的源文件哈希是否与原始源文件匹配。尽管如此，在微软，我们仍然秉承 “assume breach” 的理念，该理念告诉我们，无论我们的安全实践多么勤奋和广泛，潜在的对手都可以同样地聪明并拥有大量资源。作为 Solorigate 调查的一部分，我们使用了自动和手动技术来验证我们的源代码，构建环境以及生产二进制文件和环境的完整性。&lt;/p&gt;&#xA;&lt;p&gt;微软在 Solorigate 调查期间的贡献反映了我们对 &lt;a href=&#34;https://medium.com/@johnlatwc/the-githubification-of-infosec-afbdbfaad1d1&#34;&gt;Githubification of InfoSec&lt;/a&gt; 中描述的基于社区的共享愿景的承诺。为了保持我们对防御者知识的了解并加快社区对复杂威胁的响应的愿景，微软团队在此次事件期间公开透明地共享了&lt;a href=&#34;https://techcommunity.microsoft.com/t5/azure-active-directory-identity/understanding-quot-solorigate-quot-s-identity-iocs-for-identity/ba-p/2007610&#34;&gt;威胁情报&lt;/a&gt;，&lt;a href=&#34;https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/&#34;&gt;详细的攻击分析和 MITER ATT＆CK 技术&lt;/a&gt;，&lt;a href=&#34;https://techcommunity.microsoft.com/t5/azure-sentinel/solarwinds-post-compromise-hunting-with-azure-sentinel/ba-p/1995095&#34;&gt;高级狩猎查询&lt;/a&gt;，&lt;a href=&#34;https://www.microsoft.com/security/blog/2020/12/21/advice-for-incident-responders-on-recovery-from-systemic-identity-compromises/&#34;&gt;事件响应指南&lt;/a&gt;以及&lt;a href=&#34;https://techcommunity.microsoft.com/t5/azure-active-directory-identity/azure-ad-workbook-to-help-you-assess-solorigate-risk/ba-p/2010718&#34;&gt;风险评估工作簿&lt;/a&gt;。微软鼓励其他安全组织开源自己的威胁知识和防御者技术来共享 “Githubification” 愿景，以加速防御者的洞察力和分析。如前所述，我们已在 &lt;a href=&#34;https://aka.ms/solorigate&#34;&gt;https://aka.ms/solorigate&lt;/a&gt; 上收集了全面的资源，以提供有关攻击的技术详细信息，威胁情报和产品指南。作为微软全面调查 Solorigate 的一部分，我们检查了自己的环境。正如我们之前所&lt;a href=&#34;https://msrc-blog.microsoft.com/2020/12/31/microsoft-internal-solorigate-investigation-update/&#34;&gt;分享&lt;/a&gt;的那样，这些调查发现有少量内部帐户存在活动，并且一些帐户已用于查看源代码，但是我们没有发现任何对源代码，构建基础结构，已编译的二进制文件或生产环境进行任何修改的&lt;a href=&#34;https://www.microsoft.com/security/blog/2021/02/18/turning-the-page-on-solorigate-and-opening-the-next-chapter-for-the-security-community/&#34;&gt;证据&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;codeql-入门以及微软如何使用它&#34;&gt;CodeQL 入门以及微软如何使用它&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://securitylab.github.com/tools/codeql&#34;&gt;CodeQL&lt;/a&gt; 是一种功能强大的语义代码分析引擎，现在已经是 GitHub 的一部分。与许多分析解决方案不同，它在两个不同的阶段工作。首先，作为将源代码编译为二进制文件的一部分，CodeQL 建立了一个捕获编译代码模型的数据库。对于解释型语言，由于没有编译器，因此它将解析源并构建自己的抽象语法树模型。其次，该数据库一旦构建，便可以像其他任何数据库一样反复查询。CodeQL 语言是专用于构建可轻松从数据库中选择复杂的代码条件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微软Visual Studio Code基本特征</title>
      <link>https://madneal.com/post/%E5%BE%AE%E8%BD%AFvisual-studio-code%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81/</link>
      <pubDate>Sat, 02 May 2015 07:09:46 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%BE%AE%E8%BD%AFvisual-studio-code%E5%9F%BA%E6%9C%AC%E7%89%B9%E5%BE%81/</guid>
      <description>&lt;p&gt;Visual Studio Code它的核心功能还是作为一个代码编辑器。和其他的代码编辑器一样，VScode采取通用的UI和布局，浏览器在左边，显示所有的文件和文件夹，右边你打开的文件的编辑页面。&lt;/p&gt;&#xA;&lt;h2 id=&#34;文件文件夹以及项目&#34;&gt;文件，文件夹以及项目&lt;/h2&gt;&#xA;&lt;p&gt;VScode是基于文件和文件夹的，你可以立即开始通过打开一个文件和文件夹。除了这些，VScode能够读不同框架和平台定义的项目文件。比如，如果你打开的文件夹包含一个或者多个package.json，project.json，tsconfig.json,或者ASP.NET 解决方案和项目文件，VScode可以读取这些文件并且利用他们来提供额外的功能比如代码补全功能。&lt;/p&gt;&#xA;&lt;h2 id=&#34;打开vscode&#34;&gt;打开VScode&lt;/h2&gt;&#xA;&lt;p&gt;你可以从命令行利用VScode打开文件，文件夹或者项目。&#xA;打开VScode中的一个index.html文件：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;code index.html&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;打开文件夹c:\src\Contents：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;code c:\src\contents&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;VScode中并不区分是打开文件夹还是打开项目。如果你打开的文件夹包含项目文件，VScode会读取这些文件并且显示这些项目内容在状态栏中。在这你也可以进行不同的项目之间的切换。&#xA;打开文件夹c:src\WebApp中包含的项目：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;code c:\src\webapp&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;换句话说，打开包含项目的文件夹能够有效地打开项目：&#xA;&lt;img src=&#34;http://img.blog.csdn.net/20150502065832553&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;打开当前文件夹：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;code .&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;基本布局&#34;&gt;基本布局&lt;/h2&gt;&#xA;&lt;p&gt;VScode布局简单，能够最大化编辑界面并且也能够留下足够的空间浏览文件夹或者项目的内容。UI可以分成四个部分&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编辑器 最主要地区域编辑文件。最多可以打开三个编辑页面。&lt;/li&gt;&#xA;&lt;li&gt;边栏 包括不同的视图，比如你在处理项目时候地浏览器&lt;/li&gt;&#xA;&lt;li&gt;状态栏 显示你正在打开项目和文件的状态&lt;/li&gt;&#xA;&lt;li&gt;视图栏  可以让你在不同的视图中进行切换&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;每次你打开VScode都会恢复到上一次关闭的状态。文件夹布局如下所示。&#xA;&lt;img src=&#34;http://img.blog.csdn.net/20150502070649040&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;不是把文件放在不同的tab之中，VScode可以最多同时打开3个编辑器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;并排编辑&#34;&gt;并排编辑&lt;/h2&gt;&#xA;&lt;p&gt;你可以最多可以并排打开3个编辑器。&#xA;如果你已经有一个编辑器打开，你可以通过各种不同的途径打开另外的编辑器。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ctrl 在浏览器中打开一个文件&lt;/li&gt;&#xA;&lt;li&gt;comman+\ 将编辑器分成两个&#xA;&lt;img src=&#34;http://img.blog.csdn.net/20150502072259377&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;无论何时你打开另外一个文件，编辑器将会激活正在打开的文件。&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
