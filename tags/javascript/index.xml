<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/javascript/</link>
    <description>Recent content in Javascript on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Tue, 09 Mar 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript能否修改Referer请求头</title>
      <link>https://madneal.com/post/referer/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/referer/</guid>
      <description>&lt;p&gt;正如题目，本文的也很直白，主要就是围绕这个问题展开。JavaScript 能否修改 Referer 请求头？现在 JavaScript 的能力越来越强大，JavaScript 似乎无所不能，修改一个小小的 Referer 请求头似乎看来不在话下（本文讨论的 JavaScript 仅限于在浏览器中执行，不包括 Nodejs）。&lt;/p&gt;&#xA;&lt;p&gt;其实不然，在 web 浏览器中，绝大多数浏览器都禁止了 JavaScript 直接去操作 Referfer 请求头，当然这一方面也是出于安全方面的考虑。当然除了 Referer 请求头之外，还有其它请求头也被禁止通过 JavaScript 操作。&lt;/p&gt;&#xA;&lt;p&gt;Referer 请求头属于 Forbidden header，这种请求头无法通过程序来修改，浏览器客户端一般会禁止这种行为。以 &lt;code&gt;Proxy-&lt;/code&gt; 和 &lt;code&gt;Sec-&lt;/code&gt; 开头的请求头都属于 Fobidden header name，还包括以下这些请求头：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Accept-Charset&#xA;Accept-Encoding&#xA;Access-Control-Request-Headers&#xA;Access-Control-Request-Method&#xA;Connection&#xA;Content-Length&#xA;Cookie&#xA;Cookie2&#xA;Date&#xA;DNT&#xA;Expect&#xA;Feature-Policy&#xA;Host&#xA;Keep-Alive&#xA;Origin&#xA;Proxy-&#xA;Sec-&#xA;Referer&#xA;TE&#xA;Trailer&#xA;Transfer-Encoding&#xA;Upgrade&#xA;Via&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以通过一段简单的 demo 来进行验证。可以通过 Chrome 的开发者工具来进行验证，创建一个 xhr 请求，并且尝试来设置请求头。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/03/09/mwgJZQ2MPtlT14o.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以看出，如果设置 &lt;code&gt;content-type&lt;/code&gt;，浏览器没有阻止，但是如果设置 &lt;code&gt;Referer&lt;/code&gt; 的话，浏览器则不允许，提示 &lt;code&gt;Refused to set unsafe header &amp;quot;Referer&amp;quot;&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>从一道面试题谈谈 setTimeout 和 setInterval</title>
      <link>https://madneal.com/post/%E4%BB%8E%E4%B8%80%E5%88%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E8%B0%88%E8%B0%88settimeout%E5%92%8Csetinterval/</link>
      <pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/%E4%BB%8E%E4%B8%80%E5%88%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E8%B0%88%E8%B0%88settimeout%E5%92%8Csetinterval/</guid>
      <description>&lt;p&gt;最近有看到一道题目，使用 JavaScript，隔一秒打印一个数字，比如第 0 秒打印 0，第 1 秒打印 1 等等，如何去实现？&lt;/p&gt;&#xA;&lt;p&gt;假如我们尝试使用 setTimeout 去实现：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样可以么，执行的结果是什么呢？你可以将这段代码粘贴到 浏览器的 Console 中运行一下。结果是，每隔一秒打印一个 5 ，一共打印 5 次。这是为什么呢，为什么不是打印 0, 1, 2, 3, 4 呢？众所周知，JavaScript 是一种单线程语言，主线程的语句和方法会阻塞定时任务的执行，在 JavaScript 执行引擎之外，存在一个任务队列。当代码中调用 setTimeout 方法时，注册的延时方法会挂在浏览器其他模块处理，等达到触发条件是，该模块再将要执行的方法添加到任务队列中。这个过程是与执行引擎主线程独立，只有在主线程方法全部执行完毕的时候，才会从该模块的任务队列中提取任务来执行。这就是为什么 setTimeout 中函数延迟执行的时间往往大于设置的时间。&lt;/p&gt;&#xA;&lt;p&gt;因此，对于上述的代码块，每一个 setTimeout 函数都被添加到了任务队列中。然后，这还涉及到了函数作用于的问题。因为当任务队列中的函数执行的时候，其作用域其实是全局作用域。setTimeout 中的打印函数执行的时候就会在全局作用域中寻找变量 i，而此时全局作用域的变量 i 的值已经变成 5 了。这也就是为什么打印的数字都是 5。那么应该如何达到我们一开始预期的效果呢？这里我们就需要考虑到函数执行上下文的问题，可以通过立即执行函数（IIFE）来改变函数作用域。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;setTimeout&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以将这段代码执行一下，可以看看执行的效果，应该就可以达到预期的效果了。通过立即执行函数改变函数运行的作用域，并且将要打印的变量传入到函数参数中，如此就能打印出正确的数字了。那么除了 setTimeout，我们是不是还有其它的方法呢？答案是有的，我们可以使用 setInterval 方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>出去就餐并且理解Express.js的基本知识</title>
      <link>https://madneal.com/post/%E5%87%BA%E5%8E%BB%E5%B0%B1%E9%A4%90%E5%B9%B6%E4%B8%94%E7%90%86%E8%A7%A3express.js%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 12 Nov 2017 17:12:53 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%87%BA%E5%8E%BB%E5%B0%B1%E9%A4%90%E5%B9%B6%E4%B8%94%E7%90%86%E8%A7%A3express.js%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/11520/1*iMkFu1T52fkSnlZDlCrvkQ.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;going-out-to-eat-and-understanding-the-basics-of-expressjs出去就餐并且理解expressjs的基本知识&#34;&gt;Going out to eat and understanding the basics of Express.js出去就餐并且理解Express.js的基本知识&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://medium.freecodecamp.org/going-out-to-eat-and-understanding-the-basics-of-express-js-f034a029fb66&#34;&gt;Going out to eat and understanding the basics of Express.js&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/neal1991&#34;&gt;neal1991&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/neal1991&#34;&gt;articles-translator &lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;如果你曾经去过一个坐下来就餐的餐厅，那么你可以了解 Express 的基础知识。 但是，如果你刚刚开始构建你的第一个 Node.js 后端&amp;hellip;&amp;hellip;你可能并不会很顺利。&lt;/p&gt;&#xA;&lt;p&gt;是的 - 如果你曾经有过 JavaScript 经验，学习 Node 肯定更容易。 但是，在构建后端时面临的挑战与在前端使用JavaScript 时所面临的挑战完全不同。&lt;/p&gt;&#xA;&lt;p&gt;当我学习Node时，我选择了困难的方式。 我一遍又一遍地学习电子书，写作教程和视频，直到我终于明白我&lt;strong&gt;为什么&lt;/strong&gt;要做我正在做的事情。&lt;/p&gt;&#xA;&lt;p&gt;有一个更简单的方法。 我打算用一个餐馆的比喻来解释你的第一个应用程序的四个关键部分。 &lt;a href=&#34;https://expressjs.com/&#34;&gt;Express.js&lt;/a&gt; 是一个组织你的代码的流行框架，我会为任何初学者推荐它。 稍后我会进一步解释。&lt;/p&gt;&#xA;&lt;p&gt;下面是我们将会涉及到的四个关键部分：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The require statements&lt;/li&gt;&#xA;&lt;li&gt;Middleware&lt;/li&gt;&#xA;&lt;li&gt;Routing&lt;/li&gt;&#xA;&lt;li&gt;App.listen()/ Starting the server&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;在这个比喻中，你是一个餐馆老板，希望雇用一个总经理 - 创建所有流程并且进行管理，这样餐厅就可以顺利运行，客户也就快乐了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaScript是如何工作的：引擎，运行时间以及调用栈的概述</title>
      <link>https://madneal.com/post/javascript%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BC%95%E6%93%8E%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E4%BB%A5%E5%8F%8A%E8%B0%83%E7%94%A8%E6%A0%88%E7%9A%84%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Wed, 13 Sep 2017 21:04:31 +0000</pubDate>
      <guid>https://madneal.com/post/javascript%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BC%95%E6%93%8E%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E4%BB%A5%E5%8F%8A%E8%B0%83%E7%94%A8%E6%A0%88%E7%9A%84%E6%A6%82%E8%BF%B0/</guid>
      <description>&lt;h1 id=&#34;javascript是如何工作的引擎运行时以及调用栈的概述&#34;&gt;JavaScript是如何工作的：引擎，运行时以及调用栈的概述&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf&#34;&gt;How JavaScript works: an overview of the engine, the runtime, and the call stack&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/neal1991&#34;&gt;neal1991&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/neal1991&#34;&gt;articles-translator &lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;随着JavaScript变得越来越流行，团队在多个层级都对它进行利用－前端，后端，混合应用，嵌入式设备以及更多。&lt;/p&gt;&#xA;&lt;p&gt;正如&lt;a href=&#34;http://githut.info/&#34;&gt;GitHut stats&lt;/a&gt;所展示的那样，JavaScript是Github上面最活跃以及总Push次数最多的语言。在其它类别中也不会落后太多。&#xA;&lt;img src=&#34;https://cdn-images-1.medium.com/max/3036/1*Zf4reZZJ9DCKsXf5CSXghg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;(&lt;a href=&#34;https://madnight.github.io/githut/&#34;&gt;获取最新的 GitHub language stats&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;如果项目对于JavaScript越来越依赖，这意味着为了构建好的软件开发者必须利用这个JS提供的一切并且对于生态系统的内部有着更深的理解。&lt;/p&gt;&#xA;&lt;p&gt;因此，尽管每天有很多开发者在使用JavaScript，但并不知道内部到底发生了什么。&lt;/p&gt;&#xA;&lt;h2 id=&#34;概览&#34;&gt;概览&lt;/h2&gt;&#xA;&lt;p&gt;几乎每个人都已经听说过V8引擎的概念，并且很多知道JavaScript是单线程的或者它是使用一个回调队列的。&lt;/p&gt;&#xA;&lt;p&gt;在这篇博文中，我们将会详细讲述所有概念并且解释JavaScript是如何真正运行的。在了解这些细节之后，你将能够写出能够适宜地利用提供的API的更好的，非阻塞的app。&lt;/p&gt;&#xA;&lt;p&gt;如果对于JvaScript来说还不是很了解，这篇博文将会帮助你理解为什么JavaScript和别的语言相比如此“奇怪”。&lt;/p&gt;&#xA;&lt;p&gt;如果你是一个有经验的JavaScript开发者，希望这篇文章能够让你对你每天使用的JavaScript Runtime是如何真正工作的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;javascript-引擎&#34;&gt;&lt;strong&gt;JavaScript 引擎&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;最流行的JavaScript引擎的例子之一就是谷歌的V8引擎。比如Chrome以及Node.js内部就是使用V8引擎。下面是一个简单的视图示例：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2048/1*OnH_DlbNAPvB9KLxUCyMsA.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;引擎主要由两个部分组成：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内存堆——这是内存分配发生的地方&lt;/li&gt;&#xA;&lt;li&gt;回调——这是你代码执行时的栈帧。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;runtime&#34;&gt;&lt;strong&gt;Runtime&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;p&gt;有很多浏览器中的API几乎都被JavaScript开发者使用过（比如：&amp;lsquo;setTimeout&amp;rsquo;）。然而这些API并不是由引擎提供的。&lt;/p&gt;&#xA;&lt;p&gt;那么，它们是从哪来的呢？&lt;/p&gt;&#xA;&lt;p&gt;事实证明这有一点复杂。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn-images-1.medium.com/max/2048/1*4lHHyfEhVB0LnQ3HlhSs8g.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;因此，虽然我们有引擎但实际上是有更多。我们有那些由浏览器提供的Web API，像DOM, AJAX, setTimeout以及更多。&lt;/p&gt;&#xA;&lt;p&gt;接着，我们还有非常流行的&lt;strong&gt;事件循环(event loo)&lt;strong&gt;以及&lt;/strong&gt;回调队列(callback queue)&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;调用栈&#34;&gt;调用栈&lt;/h2&gt;&#xA;&lt;p&gt;JavaScript是一种单线程的编程语言，这意味着它只拥有一个单独的调用栈。因此它一次只能做一件事情。&lt;/p&gt;</description>
    </item>
    <item>
      <title>通过利用immutability的能力编写更安全和更整洁的代码</title>
      <link>https://madneal.com/post/%E9%80%9A%E8%BF%87%E5%88%A9%E7%94%A8immutability%E7%9A%84%E8%83%BD%E5%8A%9B%E7%BC%96%E5%86%99%E6%9B%B4%E5%AE%89%E5%85%A8%E5%92%8C%E6%9B%B4%E6%95%B4%E6%B4%81%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Sun, 21 May 2017 11:41:05 +0000</pubDate>
      <guid>https://madneal.com/post/%E9%80%9A%E8%BF%87%E5%88%A9%E7%94%A8immutability%E7%9A%84%E8%83%BD%E5%8A%9B%E7%BC%96%E5%86%99%E6%9B%B4%E5%AE%89%E5%85%A8%E5%92%8C%E6%9B%B4%E6%95%B4%E6%B4%81%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;h1 id=&#34;通过利用immutability的能力编写更安全和更整洁的代码&#34;&gt;通过利用immutability的能力编写更安全和更整洁的代码&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://medium.freecodecamp.com/write-safer-and-cleaner-code-by-leveraging-the-power-of-immutability-7862df04b7b6&#34;&gt;Write safer and cleaner code by leveraging the power of “Immutability”&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/neal1991&#34;&gt;neal1991&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/neal1991&#34;&gt;articles-translator &lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/12164075/26274743/77a794ca-3d83-11e7-861f-6504b9c0e8c6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Immutability是函数式编程的重要基础之一。它允许你能编写更安全以及更整洁的代码。我将会通过一些JavaScript例子来向你展示如何来达到immutability。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;根据维基百科：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;不可变对象是一个在创建之后不能修改其状态的对象。这正与可变对象相反，它能够在创建之后被修改。在某些情况下，对象被认为是不可变的，即使其内部的某些属性发生改变，但是从外部的角度来看这个对象的状态看起来还是没有发生变化的。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;immutable数组&#34;&gt;Immutable数组&lt;/h2&gt;&#xA;&lt;p&gt;数组是理解immutability如何工作的很好的起点。让我们一起来看一看。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrayA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;arrayA&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrayB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrayA&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;arrayB&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arrayA&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// [1, 2, 3, 4, 5]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arrayB&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// [1, 2, 3, 4, 5]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个例子将&lt;strong&gt;arrayA&lt;/strong&gt;的引用分配给&lt;strong&gt;arrayB&lt;/strong&gt;，因此这个push方法在这两个变量中都会添加5这个值。我们的代码间接地修改其它的值，这并不是我们想要的。这也违反了immutability的原则。&lt;/p&gt;&#xA;&lt;p&gt;我们可以通过使用 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&#34;&gt;slice&lt;/a&gt;函数将我们的例子提升为immutable，并且这个代码的行为也产生了变化。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrayA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;arrayA&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrayB&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;arrayA&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;arrayB&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arrayA&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// [1, 2, 3, 4]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;arrayB&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// [1, 2, 3, 4, 5]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这正是我们想要的。代码没有改变其它值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>菜鸟程序员成长史 --记 Github 1000&#43; contributions</title>
      <link>https://madneal.com/post/programer/</link>
      <pubDate>Fri, 19 May 2017 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/programer/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2024/03/29/48EWRegFvPGiMnw.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;其实一直以来想写一篇文章总结这几年的技术学习，刚好趁着自己的第一次 github contribution 达到1000+，写篇文章总结以下。本文篇幅较长，我会分为几个章节来分别阐述。&lt;/p&gt;&#xA;&lt;h1 id=&#34;博客篇&#34;&gt;博客篇&lt;/h1&gt;&#xA;&lt;p&gt;为什么我要把博客放在第一位呢？因为我认为博客是developer学习技术的平台，也是developer分享知识的平台，博客差不多也就相当于是developer的名片。现如今，博客平台形形色色，有老牌的博客园，CSDN，也有现在比较新潮的SegmentFault，掘金，开发者头条，知乎等等。现在博客的形式已经发展得多种多样，现如今新潮的犹如各种各样的专栏等等。当然，在这么多博文中，有很多质量很高的文章，也有很多滥竽充数的垃圾文章。下面，我就就我个人的了解探探我接触的这些博客平台，仅是个人观点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;github&#34;&gt;Github&lt;/h2&gt;&#xA;&lt;p&gt;哈哈。我为什么把Github列到博客篇呢？其实现在Github几乎已经成为了我生命中不可或缺的一部分，每天打开电脑的一件事，基本就是打开Github看看。作为世界上最大的同性交友网站，Github对于程序猿来说绝对是生命中不可或缺的部分。在此，我主要说说Github作为博客方面的内容。&#xA;很多人认为Github只不过是一个代码托管的地方，为什么会和博客有关系呢？其实，现在很多人都是在Github的issue里面开博客，因为issue里面方便作者和读者的沟通，而且支持markdown格式，各种功能也是很丰富。对于比较关注的博客，你可以设置watch，这样你就可以了解issue里面的每一次变化，并且还会有相应的邮件通知。在此，给出几个我关注的几个人的Github博客：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/chokcoco/iCSS&#34;&gt;iCSS&lt;/a&gt;：讲解CSS的，有的还是蛮有趣的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/youngwind/blog&#34;&gt;梁少峰的个人博客&lt;/a&gt;：讲解vue讲解的很透彻，百度大牛，我觉得有些博文挺值得看，而且值得多看几遍，不过我好像都没看完。他的博文还是需要深度挖掘的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ccforward/cc&#34;&gt;ccforward/cc&lt;/a&gt;：应该是当初关注他的一个知乎爬虫，他的博客内容我没有看太多，但是内容貌似还不错。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hanzichi/underscore-analysis&#34;&gt;underscore-analysis&lt;/a&gt;：解析underscroe源代码的，挺不错的，我看过一两篇，值得多读几篇，我自己也该去读了。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/windiest/Front-end-tutorial&#34;&gt;Front-end-tutorial&lt;/a&gt;：内容很多，我没有过多了解，可以了解一下。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以上就是我了解的一些在Github上面的博客，因为在Github我没有特别关注这方面，所以还不是特别多，当然Github也不是我主要逛博客的地方。&lt;/p&gt;&#xA;&lt;h2 id=&#34;csdn&#34;&gt;CSDN&lt;/h2&gt;&#xA;&lt;p&gt;CSDN是我开启个人技术博客的地方，感兴趣的地方去我的博客逛逛http://blog.csdn.net/neal1991 。我应该是从2015年4月份开始写博客的，博客的内容主要有我研究生期间一开始做的道路识别的一些研究的论文，虽然这个方向没搞下去，这个方向的确很有前景，只能说老板很有眼光，但我没能力，没能搞下去。其它的也包括一些开发过程遇到的坑之内的，面试经历，技术文章翻译。老实说，CSDN现在的确不是一个很好的平台，因为本身它就偏老，在markdown的显示不是很完美，在移动端显示不是很好，还有一点很重要，广告特别多，还是莫名其妙的，看起来很讨厌。其实我一直都想弃坑，奈何就是github国内访问速度不稳定，还有毕竟在这边维护这么久了，所以还是一直维护着。在CSDN上，我基本上都是去写博客，基本不会在它上面浏览技术博客，因为它的浏览界面实在是太杂乱了，没有重点。这可能也是老牌博客的一个缺点，可能一时半会也没办法改过来。下面我主要讲一些我自己的一些比较稍微有用的博客内容：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/neal1991/article/details/45037265&#34;&gt;combox系列问题集&lt;/a&gt;：当初做winform开发遇到的问题，记得当初最坑爹的是调试combox的时候，visual studio老是崩溃，后来发觉居然是有道翻译的锅，也是醉了。。。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/neal1991/article/details/45128193&#34;&gt;独立成分分析&lt;/a&gt;：这个应该是当初一个讨论班里面要做的一个presentation，我把内容整理出来写了这篇博文，阅读量快2000了，好像是我博客里面阅读次数最多的了。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/neal1991/article/details/49027735&#34;&gt;如何查找django安装路径&lt;/a&gt;：非常简单的一个问题，但是当初搜遍了，没找到解决方法。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/neal1991/article/details/51793644&#34;&gt;mongoose对象无法新增删除属性&lt;/a&gt;：当初在处理mongo遇到的一个问题，是个坑。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/neal1991/article/details/60325282&#34;&gt;第一个chrome extension&lt;/a&gt;：第一次写chrome extension，没有想象中的那么复杂，不过还是有一些方法的，貌似360有翻译过谷歌相关的文档。老实说，谷歌真的很良心，现在很多开发者文档都已经是中文的了。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/neal1991/article/details/63684674&#34;&gt;第一个pwa&lt;/a&gt;：第一次写progressive web application，其实写pwa和写其它单页面应用没有特别大的区别。pwa也是我非常看到的技术栈，我觉得这个比小程序好上一百倍，只不过现在在国内还是不温不火，但是我觉得很肯能哪一天就星星之火，可以燎原了。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;鉴于CSDN平台的种种，我的确越来越不太愿意在这上面写文章。而且我最近的文章一向是以翻译国外技术文章为主，毕竟还是菜，所以只能靠英语吃饭啦。&lt;/p&gt;&#xA;&lt;h2 id=&#34;掘金&#34;&gt;掘金&lt;/h2&gt;&#xA;&lt;p&gt;老实说，掘金应该是同类这种网站访问量比较大的。的确，里面有不少的精品内容，当然也会参杂很多乱七八糟的东西。其实，现在一般的原创博主都不会只在一个平台发文章，所以基本上你这个平台看得到的，在其它平台也差不多都能看到。只不过我现在基本不看掘金了，因为他们的编辑对新人&lt;strong&gt;极度不友善，极度不友好&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;众成翻译&#34;&gt;&lt;a href=&#34;http://www.zcfy.cc/@neal1991&#34;&gt;众成翻译&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;360的一个专门翻译技术博客为主的平台，目前应该还是比较小众。360的前端其实还是蛮不错的，尤其是他们的齐舞团队，里面也有很多大牛。这个平台里面的文章一半质量还是比较高的，而且这个平台翻译操作也是蛮舒适的，感兴趣的非常值得试一试。而且他们的群沟通都很流畅，不像掘金那帮人。。。无力吐槽。&lt;/p&gt;&#xA;&lt;h2 id=&#34;知乎&#34;&gt;知乎&lt;/h2&gt;&#xA;&lt;p&gt;我本身一向是很排斥知乎的。讲心里话，知乎里面百分之八十的人都是在写故事，骗关注的，我也不明白知乎为什么充斥了这么多天天无事可做的人。当然，不可否认的是，知乎里面还是存在百分之二十的精品内容的，这也是让我能够忍受那剩余的百分之八十垃圾的原因。知乎里面那些回答我觉得没有太大的意义，看了也就是笑一笑，一般都是用来刷新三观用的，在此，我仅说一些技术专栏：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/ElemeFE&#34;&gt;饿了么前端&lt;/a&gt;：饿了么现在前端的确搞得风生水起，尤其是pwa，感觉他们是这方面搞得国内最为成熟的一家。可能并不是，但他们肯定是分享这方面内容最多的公司。感觉饿了么前端蛮多大牛，不过感觉他们都喜欢混国外圈，黄玄基本都是在medium发文章的。。。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/wxyyxc1992&#34;&gt;某熊的全栈之路&lt;/a&gt;：这个应该是infoq的专栏，这个编辑每个礼拜会发一个国内外最新技术的文章集合，基本是前端为主。内容比较新颖，基本上最时髦的都在这里面。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/think-in-vue&#34;&gt;Think In Vue&lt;/a&gt;：意如其名，现在vue在国内真的很火。火到我觉得用react的撕逼应该撕不过vue，vue的作者尤雨溪在知乎也是很活跃的，经常手撕任何喷vue的人，还有看他阮一峰每日一喷很有意思。阮老师也是个很有意思的人，感觉天天都有人喷他，但是阮老师的心态丝毫不受影响，剖有大师风范。不过值得一提的是，阮老师博客的广告位可价值不菲哦~~&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/c_63840855&#34;&gt;美团点评技术博客&lt;/a&gt;：算得上是大厂，值得一看。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;知乎乱，前端乱，如何乱中取胜，就是要保持一颗平常心。&lt;/p&gt;&#xA;&lt;h2 id=&#34;开发者头条&#34;&gt;&lt;a href=&#34;https://toutiao.io/subjects/231715&#34;&gt;开发者头条&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;不温不火的平台，文章质量还行。我一般发文章这个里面也会发一份。感觉里面的内容偏机器学习以及架构方面，而且这发文章可以攒IO币，可以换书哟。&lt;/p&gt;&#xA;&lt;h2 id=&#34;medium&#34;&gt;Medium&lt;/h2&gt;&#xA;&lt;p&gt;国外的一个博客平台，访问需要翻墙。这是国外一个专门写story的地方，样式很好看，应该算得上是国外非常知名的一个博客平台了。当然了，里面的内容也是多姿多彩的，同时里面的技术文章质量也有很多很高的文章。现在国内技术圈翻译的大多数文章基本都是来自于这个平台。&lt;/p&gt;&#xA;&lt;h2 id=&#34;quora&#34;&gt;Quora&lt;/h2&gt;&#xA;&lt;p&gt;国外一个和知乎一样的网站。不过知乎由于国内人数优势，火爆异常。Quora则是不温不火，而且上面还有不少华人。我关注过一段时间，但貌似都没什么特别的内容。&#xA;以上基本就是我所有的对于一些博客平台的了解，可能不包含所有，但基本都是我自己的个人的亲身经历。可能部分言辞颇为激烈，但也都是我的肺腑之言。&lt;/p&gt;&#xA;&lt;h2 id=&#34;微信公众号&#34;&gt;微信公众号&lt;/h2&gt;&#xA;&lt;p&gt;微信公众号作为一种特殊的平台，现在也成为一种传播渠道，有点类似于报看订阅的形式。但这不一定是一种非常有效的传播方式，感觉深度还是不够的，我比较喜欢在电脑上看文章，因为在手机上看文章难以持续地专注于一篇有内容的文章，一般就只能浅尝则止。所以我一般都是把链接转到我的微信PC版，然后再用浏览器打开，下面介绍一些我关注的一些技术类公众号：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;前端之巅：我之前提过的，应该是infoQ的平台，其实和之前的知乎专栏应该是重叠的。&lt;/li&gt;&#xA;&lt;li&gt;奇舞周刊：360奇舞团队，前面也介绍过了，国内的知名的前端团队，会有一些比较有价值的文章。&lt;/li&gt;&#xA;&lt;li&gt;前端早读课：每天早上都会发送推文，但是文章质量嘛，参差不齐，基本上都是别人的文章。&lt;/li&gt;&#xA;&lt;li&gt;FEX：百度FEX团队，收集最新技术文章，但是排版比较差，比较原始。&lt;/li&gt;&#xA;&lt;li&gt;神秘的程序员们：里面会有一些脑洞大开的漫画，而且会有程序猿和产品经理以及架构师撕逼的故事，很有趣。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;github-1&#34;&gt;Github&lt;/h1&gt;&#xA;&lt;p&gt;为什么我要把Github单独作为一章节来讲呢？因为它实在太重要了！！！以至于我除了它，根本不想去尝试其它类似的平台。关于Github可以讲的东西太多太多，它带给程序员的则是无穷的魅力。在此，我也仅就几个方面谈谈我的个人理解：&lt;/p&gt;&#xA;&lt;h2 id=&#34;star篇&#34;&gt;star篇&lt;/h2&gt;&#xA;&lt;p&gt;Star是衡量一个开源项目是否受欢迎的重要标准之一（当然也有很多是骗star的）。其实，现在很多人看到一个项目都会去star，但是后续是否会关注，当然也就不一定了。曾经有一段时间，我对star深深着迷（其实现在还是很着迷），我每天都希望有人能给我的项目star，看着别人上千的star我都会超级羡慕。但我其实也能够深深体会到做一个开源项目的不容易，开发者有一个idea往往很简单，但是要去实现它，推广它，完善它。这真的很难很难，而且还会有各种各样形形色色的人问你各种问题，给你提出各种要求，这些都是很痛苦的。但是我依然希望自己有一天还是能够成为一名出色的开源项目的开发者。下面我就挑一些我star的项目来讲一讲：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/prepack&#34;&gt;prepack&lt;/a&gt;：前几天，前端圈最火的技术，编译优化，facebook总是走在潮流之端。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/GoogleChrome/sw-precache&#34;&gt;sw-precache&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/GoogleChrome/sw-toolbox&#34;&gt;sw-toolbox&lt;/a&gt;：谷歌关于pwa的相关工具，值得关注。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cyrus-and/chrome-remote-interface&#34;&gt;chrome-remote-interface&lt;/a&gt;：师妹介绍我的一个调用headless Chrome的工具，文档阅读起来比较痛苦，可以码，虽然你也不一定看。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hammerjs/hammer.js&#34;&gt;hammer.js&lt;/a&gt;：一个移动端手势库，据说很好用，我没用过。。。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/developit/snarkdown&#34;&gt;snarkdown&lt;/a&gt;：一个超级轻量级的markdown库，值得码，虽然你也不一定看。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/google/guetzli&#34;&gt;guetzli&lt;/a&gt;：谷歌爸爸推出的压缩图片的工具，听说很强大。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ElemeFE/node-interview&#34;&gt;node-interview&lt;/a&gt;：饿了么的面试指南针。有一段时间Github的trending里面排名前十，有6个项目是国人的，可以想象，现在国人在Github混得有多多。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/thinkjs/thinkjs&#34;&gt;thinkjs&lt;/a&gt;：360团队的一个node.js框架，比较小众，面向企业级应用，没有深入了解过。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/webpack-china/webpack.js.org&#34;&gt;webpack中文文档&lt;/a&gt;：webpack-china的文档翻译，哈哈，我也是翻译者之一。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/vuejs/vuejs.org&#34;&gt;vue&lt;/a&gt;：这个我就不介绍了。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Ma63d/leetcode-viewer&#34;&gt;leetcode-viewer&lt;/a&gt;：一个leetcode题目博客，这个博主很厉害，貌似还没毕业。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/csfamily/OfferShow-WebAPP&#34;&gt;offershow&lt;/a&gt;：offer曝光平台，校招的可以关注关注，现在都有小程序了。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/yarnpkg/yarn&#34;&gt;yarn&lt;/a&gt;：我是不是真的别再用npm了。。。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/electron/electron&#34;&gt;electron&lt;/a&gt;：可以用前端写跨平台应用，一直想写一个。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ariya/phantomjs&#34;&gt;phantomjs&lt;/a&gt;：一个headless webkit，主要用于爬虫和测试。但是好像没剩什么维护者，前段时间两个维护者之一宣布不再继续维护。感觉吧，吃枣药丸。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/ecomfe/echarts&#34;&gt;echarts&lt;/a&gt;：百度出品，简单，好用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hakimel/reveal.js&#34;&gt;reveal.js&lt;/a&gt;：一个前端的slider绝对不应该是用ppt做出来的。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/react&#34;&gt;react&lt;/a&gt;：如同vue，我才发现，我很早就star了，然并卵。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以上，就是我挑出来想讲的一部分。Github里面优秀的项目层出不穷，有很多值得学习的地方，但是有时候也会困惑，不知道从哪一个下手。&lt;/p&gt;</description>
    </item>
    <item>
      <title>你可能不知道谷歌浏览器开发工具的其他用处</title>
      <link>https://madneal.com/post/%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E5%85%B6%E4%BB%96%E7%94%A8%E5%A4%84/</link>
      <pubDate>Mon, 03 Oct 2016 08:03:50 +0000</pubDate>
      <guid>https://madneal.com/post/%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E8%B0%B7%E6%AD%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E7%9A%84%E5%85%B6%E4%BB%96%E7%94%A8%E5%A4%84/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;原文链接 原文链接似乎翻墙才可以访问&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;译者：neal&lt;/li&gt;&#xA;&lt;li&gt;github: &lt;a href=&#34;https://github.com/neal1991&#34;&gt;https://github.com/neal1991&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;你可能不知道谷歌浏览器开发工具的其他用处&lt;/p&gt;&#xA;&lt;p&gt;Chrome内嵌开发者工具。它具有丰富的功能特色，比如元素，网络以及安全。今天，我们将完全关注javascript的console.&lt;/p&gt;&#xA;&lt;p&gt;当我才开始编程的时候，我只是将console用作纪录服务器的响应。但是后来经过一些教学的帮助，我开始发现console可以做的更多。&lt;/p&gt;&#xA;&lt;p&gt;在这我们讲一些你可以用console做更多有用的事情。如果你是用chrome浏览这篇文章，你可以马上就试试效果。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;选择节点元素&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如果你熟悉jquery的话，你应该知道$(&amp;rsquo;.class&amp;rsquo;)和$(&amp;rsquo;#id&amp;rsquo;)事多的么的重要。你可以根据id或者类名选择相应的元素。&lt;/p&gt;&#xA;&lt;p&gt;同样你可以在console使用同样的方式来访问元素。$(&amp;rsquo;tagName&amp;rsquo;) $(&amp;rsquo;.class&amp;rsquo;) $(&amp;rsquo;#id&amp;rsquo;)和document.querySelector(&amp;rsquo;&amp;rsquo;)是等同的。这个将返回文档中第一个匹配这个选择器的元素。&lt;/p&gt;&#xA;&lt;p&gt;你可以用$$(&amp;rsquo;tagName&amp;rsquo;)来访问，注意这边的两个美元符号可以访问所有符合这个选择器的元素。这些元素会组成一个数组&lt;/p&gt;&#xA;&lt;p&gt;2.将你的浏览器转化成一个编辑器&lt;/p&gt;&#xA;&lt;p&gt;你是否想过可以直接在浏览器中直接编辑？答案是肯定的，你可以将你的浏览器转化成一个文本编辑工具。你可以在dom元素中任意添加或者删除文本。&lt;/p&gt;&#xA;&lt;p&gt;你不需要检测html中的元素。取而代之，你只要去console里面输入以下：&lt;/p&gt;&#xA;&lt;p&gt;document.body.contentEditable = true&lt;/p&gt;&#xA;&lt;p&gt;3.寻找dom中元素绑定的事件&lt;/p&gt;&#xA;&lt;p&gt;当调试的时候你可能希望知道dom元素中绑定的事件。console工具能使你很轻松就找到这些事件。getEventListeners($(&amp;lsquo;selector&amp;rsquo;))将会返回一个数组包含所有事件的对象。你可以展开这个对象看到所有的事件：&lt;/p&gt;&#xA;&lt;p&gt;如果希望找到某个特定事件的监听，你可以这么做：&lt;/p&gt;&#xA;&lt;p&gt;getEventListeners($(&amp;lsquo;selector&amp;rsquo;)).eventName[0].listener&lt;/p&gt;&#xA;&lt;p&gt;这将展示所有和这个事件相关的监听。比如：&lt;/p&gt;&#xA;&lt;p&gt;getEventListeners($(&amp;rsquo;.firstName&amp;rsquo;)).click[0].listener&lt;/p&gt;&#xA;&lt;p&gt;4.监听事件&lt;/p&gt;&#xA;&lt;p&gt;如果你想监听特定元素绑定的事件的时候，你也可以在console里面这么做。你可以使用以下的这些命名：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;monitorEvents($(&amp;lsquo;selector&amp;rsquo;))将会监听符合这个选择器的元素的所有事件，并且将会显示这些事件当事件被触发的时候。&lt;/li&gt;&#xA;&lt;li&gt;monitorEvents($(&amp;lsquo;selector&amp;rsquo;),&amp;rsquo;eventName&amp;rsquo;)将会监听符合这个选择器的特定事件。你可以将事件的名称作为一个参数传入到这个函数中。&lt;/li&gt;&#xA;&lt;li&gt;monitorEvents($(&amp;lsquo;selector&amp;rsquo;),[&amp;rsquo;eventName1&amp;rsquo;,&amp;rsquo;eventName2&amp;rsquo;….])将会监听符合这个选择器的事件。&lt;/li&gt;&#xA;&lt;li&gt;unmonitorEvents($(&amp;lsquo;selector&amp;rsquo;))这个会停止监听并且在console里面显示出所有的事件。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;5.找到语句块执行的时间&lt;/p&gt;&#xA;&lt;p&gt;console里面有一个很重要的函数叫做console.time(&amp;rsquo;labelTime&amp;rsquo;)能够启动一个计时器。另外又一个函数叫做console.timeEnd(&amp;rsquo;labelName&amp;rsquo;)能够结束相应的计时器。&lt;/p&gt;&#xA;&lt;p&gt;比如我们想看到一个循环的执行时间，我们可以做如下处理：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;console.time(&#39;myTime&#39;); //Starts the timer with label - myTime&#xA;&#xA;for(var i=0; i &amp;lt; 100000; i++){&#xA;  2+4+5;&#xA;}&#xA;&#xA;console.timeEnd(&#39;mytime&#39;); //Ends the timer with Label - myTime&#xA;&#xA;//Output - myTime:12345.00 ms&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;6.将变量的值以表格形式呈现&lt;/p&gt;&#xA;&lt;p&gt;当我们有如下的一个数组的时候：&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;var myArray=[{a:1,b:2,c:3},{a:1,b:2,c:3,d:4},{k:11,f:22},{a:1,b:2,c:3}]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;我们可以使用console.table(variableName)从而以表格的形式更好地展现数据的属性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>javascript中的对象字面量为啥这么酷</title>
      <link>https://madneal.com/post/javascript%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%B8%BA%E5%95%A5%E8%BF%99%E4%B9%88%E9%85%B7/</link>
      <pubDate>Tue, 26 Jul 2016 22:37:18 +0000</pubDate>
      <guid>https://madneal.com/post/javascript%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F%E4%B8%BA%E5%95%A5%E8%BF%99%E4%B9%88%E9%85%B7/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原文链接 : &lt;a href=&#34;https://rainsoft.io/why-object-literals-in-javascript-are-cool/&#34;&gt;Why object literals in JavaScript are cool&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/blockquote&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原文作者 : &lt;a href=&#34;https://rainsoft.io/author/dmitri-pavlutin/&#34;&gt;Dmitri Pavlutin&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;译者 : &lt;a href=&#34;https://github.com/neal1991/&#34;&gt;neal1991&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;个人主页：http://neal1991.pythonanywhere.com&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;在&lt;a href=&#34;https://rainsoft.io/why-object-literals-in-javascript-are-cool/www.ecma-international.org/ecma-262/6.0/&#34;&gt;ECMAScript 2015&lt;/a&gt;之前，Javascript中的对象字面量（也称为对象初始化器）是非常基础的。能够定义两种类型的属性：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;成对出现的名称以及相应的值&lt;code&gt;{ name1: value1 }&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/get&#34;&gt;Getters&lt;/a&gt; &lt;code&gt;{ get name(){..} }&lt;/code&gt; 以及&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/set&#34;&gt;setters&lt;/a&gt; &lt;code&gt;{ set name(val){..} }&lt;/code&gt; 可以用于动态的属性值。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;遗憾的是，这个对象字面量可能会出现下面这样的情况：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var myObject = {  &#xA;  myString: &amp;#39;value 1&amp;#39;,&#xA;  get myNumber() {&#xA;    return this._myNumber;&#xA;  },&#xA;  set myNumber(value) {&#xA;    this._myNumber = Number(value);&#xA;  }&#xA;};&#xA;myObject.myString; // =&amp;gt; &amp;#39;value 1&amp;#39;  &#xA;myObject.myNumber = &amp;#39;15&amp;#39;;  &#xA;myObject.myNumber; // =&amp;gt; 15  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Javascript一个基于&lt;a href=&#34;https://en.wikipedia.org/wiki/Prototype-based_programming&#34;&gt;原型的语言&lt;/a&gt;，所以其中所有的皆是对象。所以必须在创建对象，配置以及访问原型的时候必须提供一个便利的构建方式。&lt;/p&gt;&#xA;&lt;p&gt;通常都会涉及到对象的定义和对象原型的设置。我经常觉得对于原型的设置应该允许直接在对象字面量进行，用一条语句即可。&lt;/p&gt;&#xA;&lt;p&gt;不幸的是，对象字面量的限制不允许通过使用一个直接的方法来达到这个目的。你必须通过结合使用&lt;code&gt;Object.create()&lt;/code&gt;以及对象字面量来设置原型：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var myProto = {  &#xA;  propertyExists: function(name) {&#xA;    return name in this;    &#xA;  }&#xA;};&#xA;var myNumbers = Object.create(myProto);  &#xA;myNumbers[&amp;#39;array&amp;#39;] = [1, 6, 7];  &#xA;myNumbers.propertyExists(&amp;#39;array&amp;#39;);      // =&amp;gt; true  &#xA;myNumbers.propertyExists(&amp;#39;collection&amp;#39;); // =&amp;gt; false  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我觉得这是一个让人很不爽的解决方案。Javascript既然是一个基于原型的语言，为什么还要花这么大力气从一个原型中创建对象。&lt;/p&gt;</description>
    </item>
    <item>
      <title>javascript中无法将string转化为json对象</title>
      <link>https://madneal.com/post/javascript%E4%B8%AD%E6%97%A0%E6%B3%95%E5%B0%86string%E8%BD%AC%E5%8C%96%E4%B8%BAjson%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Fri, 01 Jul 2016 16:34:48 +0000</pubDate>
      <guid>https://madneal.com/post/javascript%E4%B8%AD%E6%97%A0%E6%B3%95%E5%B0%86string%E8%BD%AC%E5%8C%96%E4%B8%BAjson%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;p&gt;在一次项目之中，我要对请求的相应做一些处理，得到的响应差不多是这中格式‘{total:1,result:[{&amp;ldquo;age&amp;rdquo;:1}]}&amp;rsquo;.可以看到我拿到的这个相应和JSON的格式是非常相似的，一开始我认为只要用JSON.parse进行转化，但是这始终会报错，无法进行转化。后来我用了个笨办法把前面的东西都去掉了拿到&amp;rsquo;[{&amp;ldquo;age&amp;rdquo;:1}]&amp;lsquo;进行转化。&#xA;后来我又找一找这个问题的原因，原来是我这个字符串中的key没有用双引号进行包裹，这并不是一个合法的JSON格式，它可以被人为是一个Javascript对象，但还不是一个合法的JSON，所以无法解析。JSON对象是由对象成员组成，而成员是由key-value键值组成。key值是一个字符串，字符串由unicode字符组成，用双引号包围，用反斜杠转义。可以是单个字符。&#xA;但是在现实应用中，很少有人知道JSON里的key需要双引号来包裹的，浏览器里面的属性都是没有双引号的，从而返回的结果无法解析。&#xA;知道问题的原因，就自然而然有相应的解决办法了。第一个办法就是本办法，手工加上双引号，也就是用正则表达式匹配；另外一个方法就是用eval直接执行,&#xA;&lt;code&gt;var obj = eval(&#39;(&#39;+str&#39;)&#39;)&lt;/code&gt;&#xA;不过你需要了解这个str里面到底有什么，这样才能防止一些恶意程序，避免带来安全问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>判断数组中元素多个属性是否重复</title>
      <link>https://madneal.com/post/%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E5%A4%9A%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E9%87%8D%E5%A4%8D/</link>
      <pubDate>Fri, 01 Jul 2016 13:42:49 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E4%B8%AD%E5%85%83%E7%B4%A0%E5%A4%9A%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E9%87%8D%E5%A4%8D/</guid>
      <description>&lt;p&gt;js中判断数组元素的重复的方法有很多，可以用hash的方法或者排序之后再进行比较，但是我们这里说的case是这样的。假设我有一个数组&lt;code&gt;[{name:&#39;neal&#39;,age:&#39;18&#39;},{name:&#39;neal&#39;,age:&#39;18&#39;},{name:&#39;jane&#39;,age:&#39;20&#39;}]&lt;/code&gt;.假如数组中元素name和age这两个属性都相同我们则给这个元素加一个属性flag设置为true,否则设置为false.其实就是判断数组中元素中多个属性是否重复的问题了。&#xA;这种问题有一个比较死的方法就是拿两个循环来做处理&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-var&#34; data-lang=&#34;var&#34;&gt;&#x9;for (var i = 0,len = collection.length;i &amp;lt; len;i++) {&#xA;&#x9;&#x9;var count = 0;&#xA;&#x9;&#x9;for (var j = 0;j &amp;lt; len;j++) {&#xA;&#x9;&#x9;&#x9;if (collection[i].name === collection[j].name &amp;amp;&amp;amp; collection[i].age === collection[j].age) {&#xA;&#x9;&#x9;&#x9;&#x9;count = count + 1;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (count &amp;gt; 1) {&#xA;&#x9;&#x9;&#x9;collection[i].flag = true;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;collection[i].flag = false;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return collection;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外一种方法是使用underscore.js里面的方法了,不过由于underscore一次只能按照一个属性来groupBy，所以也需要多次嵌套&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;collection = _.groupBy(collection,&amp;#39;name&amp;#39;);&#xA;for (var i in collection) {&#xA;&#x9;if (collection[i].length &amp;gt; 1) {&#xA;&#x9;&#x9;col = _.groupBy(collection[i],&amp;#39;age&amp;#39;);&#xA;&#x9;&#x9;for (var j in col) {&#xA;&#x9;&#x9;if (col[j].length &amp;gt; 1) {&#xA;&#x9;&#x9;_.map(col[j], function(ele) {&#xA;&#x9;&#x9;&#x9;ele.flag = true;&#xA;&#x9;&#x9;})&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;}&#xA;&#x9;else {&#xA;&#x9;&#x9;arr1[i].flag = false;&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个方法是按照name,age进行groupby，然后遍历，找出对象长度大于一的来进行加属性的操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>js的事件流理解</title>
      <link>https://madneal.com/post/js%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sat, 05 Mar 2016 17:19:32 +0000</pubDate>
      <guid>https://madneal.com/post/js%E7%9A%84%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;面试问到js的事件流，当时说的不是很清楚，现在觉得有必要把这个弄清楚。&lt;/p&gt;&#xA;&lt;h2 id=&#34;事件捕获和事件冒泡&#34;&gt;事件捕获和事件冒泡&lt;/h2&gt;&#xA;&lt;p&gt;事件流描述的是从页面中接收事件的顺序,也可理解为事件在页面中传播的顺序。&#xA;事件流主要分为两种，即事件捕获和事件冒泡，这二者接受事件处理的顺序不同。假设下面的代码：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;body&amp;gt;&#xA;&#x9;&amp;lt;div id=&amp;#34;outer&amp;#34;&amp;gt;&#xA;&#x9;&#x9;&amp;lt;div id=&amp;#34;inner&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&#x9;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这两个事件流分别的是IE公司和netspace公司提出来的，冒泡事件流支持的浏览器更多。&#xA;冒泡事件流中，事件的传递顺序是从子元素向父元素传递。假设我们给div绑定一个click事件。那么在冒泡事件流中，事件的传递顺序是：inner-&amp;gt;outer-&amp;gt;body。然而捕获事件流的顺序则截然想法：body-&amp;gt;outer-&amp;gt;innner。&lt;/p&gt;&#xA;&lt;h2 id=&#34;dom事件流&#34;&gt;DOM事件流&lt;/h2&gt;&#xA;&lt;p&gt;DOM2级事件规定事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。还是以上面的代码为例，单击inner则会按照下面的顺序触发事件：document-&amp;gt;html-&amp;gt;body-&amp;gt;outer-&amp;gt;ineer-&amp;gt;outer-&amp;gt;body-&amp;gt;html-&amp;gt;document。在DOM事件流中，实际的目标inner在捕获阶段不会接受到事件。这意味着在捕获阶段，事件到outer就停止了，下一个阶段是“处于目标”阶段，于是事件在inner 上发生，并在事件处理中呗看成是冒泡阶段的一部分。然后，冒泡阶段发生，事件又传播回文档。&lt;/p&gt;&#xA;&lt;h2 id=&#34;事件处理程序&#34;&gt;事件处理程序&lt;/h2&gt;&#xA;&lt;p&gt;响应某个时间的函数叫做事件处理程序。DOM0级的事件处理程序很简单,onclick就是常用的DOM0级事件处理函数，只会在冒泡阶段被处理。&#xA;而DOM2级事件定义了两个方法用于处理置顶和删除事件处理程序的操作addEventListener()和removeEventListener()，所有DOM节点都包含这两个方法，并且它们都接受3个参数：要处理的事件名，作为事件处理的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序，反之则是在事件冒泡阶段处理程序。DOM2级方法添加事件处理程序的好处是可以添加多个事件处理程序，会按照添加顺序被处理（无论是捕获还是冒泡）。&#xA;而IE不同的它有自己的方法attachEvent()和detachEvent,这两个接受相同的两个参数：事件处理程序名称和事件处理程序函数。&lt;/p&gt;&#xA;&lt;h2 id=&#34;跨浏览器的事件处理程序&#34;&gt;跨浏览器的事件处理程序&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var EventUtil = {&#xA;&#x9;addHandler: function(element,type,handler) {&#xA;&#x9;&#x9;if (element.addEventListener) {&#xA;&#x9;&#x9;&#x9;element.addEventListener(type,handler,false);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if (element.attachEvent) {&#xA;&#x9;&#x9;&#x9;element.attachEvent(&amp;#39;on&amp;#39;+type,handler);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;element[&amp;#39;on&amp;#39;+type] = handler;&#xA;&#x9;&#x9;}&#xA;&#x9;},&#xA;&#xA;&#x9;removeHandler: function(element,type,handler) {&#xA;&#x9;&#x9;if (element.removeEventListener)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;element.removeEventListener(type,handler,false);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else(element.detachEvent) {&#xA;&#x9;&#x9;&#x9;element.detachEvent(&amp;#39;on&amp;#39; +type,handler);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;element[&amp;#39;on&amp;#39;+type] = null;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>javascript的继承模式</title>
      <link>https://madneal.com/post/javascript%E7%9A%84%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 24 Oct 2015 14:03:33 +0000</pubDate>
      <guid>https://madneal.com/post/javascript%E7%9A%84%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;在javascript里面看到javascript的继承模式和传统的继承模式是有区别的，就想查资料看一下到底有区别，就看到了这篇文章，觉得讲得还可以，暂时先放上来，以后有别的东西再补充：&#xA;&lt;a href=&#34;http://segmentfault.com/a/1190000000766541&#34;&gt;http://segmentfault.com/a/1190000000766541&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本模式&#34;&gt;基本模式&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var Parent = function(){&#xA;&#x9;this.name = &amp;#39;parent&amp;#39;;&#xA;｝;&#xA;Parent.prototype.getName = function(){&#xA;&#x9;return this.name;&#xA;};&#xA;Parent.prototype.obj = {a:1};&#xA;&#xA;var Child = function(){&#xA;&#x9;this.name = &amp;#39;child&amp;#39;;&#xA;}&#xA;Child.protytype = new Parent();&#xA;&#xA;var parent = new Parent();&#xA;var child = new Child();&#xA;&#xA;console.log(parent.getName());//parent&#xA;console.log(child.getName());//child&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种事最简单实现原型继承的方法，直接把父类的对象复制给子类的构造函数的原型，这样子类的对象就可以访问到父类以及父类构造函数的&lt;code&gt;protytype&lt;/code&gt;&#xA;&lt;img src=&#34;http://img.blog.csdn.net/20151024131631757&#34; alt=&#34;这里写图片描述&#34;&gt;&#xA;这种方法的优点就是实现起来比较简单，不需要任何特殊的操作；同时他的缺点也很明显，如果子类需要做跟父类构造函数中相同的初始化动作，那么就得在子类构造函数中再重复一遍父类中的操作：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var Parent = function(name){&#xA;&#x9;this.name = name || &amp;#39;parent&amp;#39;;&#xA;};&#xA;Parent.prototype.getName = function(){&#xA;&#x9;return this.name;&#xA;};&#xA;Parent.prototype.obj = {a:1};&#xA;&#xA;var Child = function(name)&#xA;{&#xA;&#x9;this.name = name || &amp;#39;child&amp;#39;;&#xA;};&#xA;Child.prototype = new Parent();&#xA;&#xA;var parent = new Parent(&amp;#39;myParent&amp;#39;);&#xA;var child = new Child(&amp;#39;myChild&amp;#39;);&#xA;&#xA;console.log(parent.getName());//myParent&#xA;console.log(child.getName());//myChild&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上述还只是初始化&lt;code&gt;name&lt;/code&gt;属性，如果初始化工作不断增加，这种方式也不是很方便。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
