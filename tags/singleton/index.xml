<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Singleton on Neal&#39;s Blog</title>
    <link>https://madneal.com/tags/singleton/</link>
    <description>Recent content in Singleton on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Fri, 13 Nov 2015 12:48:17 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/tags/singleton/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>剑指offer学习--实现单例模式</title>
      <link>https://madneal.com/post/%E5%89%91%E6%8C%87offer%E5%AD%A6%E4%B9%A0--%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 13 Nov 2015 12:48:17 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%89%91%E6%8C%87offer%E5%AD%A6%E4%B9%A0--%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;只能生成一个实例的类是为了实现单例模式的类型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;加同步锁前后两次判断实例是否已存在&#34;&gt;加同步锁前后两次判断实例是否已存在&lt;/h2&gt;&#xA;&lt;p&gt;我们只是在实例还没有创建之前加锁操作，以保证只有一个线程创建出实例。而当实例已经创建之后，我们已经不需要再做加锁操作了。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public sealed class Singleton&#xA;{&#xA;&#x9;private Singelton()&#xA;&#x9;{&#xA;&#x9;}&#xA;private static object syncObj = new object();&#xA;&#xA;private static Singleton instance = null;&#xA;public static Singleton Instance&#xA;{&#xA;&#x9;get&#xA;&#x9;{&#xA;&#x9;&#x9;if (instance == null)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;locak(syncObj)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (instance == null)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;instance = new Singleton();&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return instance;&#xA;&#x9;}&#xA;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;利用静态构造函数&#34;&gt;利用静态构造函数&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public seled class Singleton&#xA;{&#xA;&#x9;private Singelton()&#xA;&#x9;{&#xA;&#x9;}&#xA;&#xA;&#x9;private static Singleton instance = new Singleton();&#xA;&#x9;public static Singleton Instance&#xA;&#x9;{&#xA;&#x9;&#x9;get&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;return instance;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于C#中调用静态构造函数时初始化静态变量，.NET运行时能够保证只调用一次静态构造函数，这样我们就能够保证只初始化一次instance。C#中调用静态构造函数的时机不是由程序员掌控的，而是当.NET运行时发现第一使用一个类型的时候自动调用该类型的静态构造函数。在Singleton中，实例instance并不是第一次调用属性Singleton.Instance的时候创建的，而是在第一次用到Singleton的时候就会被创建。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
