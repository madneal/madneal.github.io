<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Neal&#39;s Blog</title>
    <link>https://madneal.com/categories/python/</link>
    <description>Recent content in Python on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Thu, 16 Aug 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用 python 生成可视化报告</title>
      <link>https://madneal.com/post/%E5%88%A9%E7%94%A8python%E7%94%9F%E6%88%90%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%88%A9%E7%94%A8python%E7%94%9F%E6%88%90%E5%8F%AF%E8%A7%86%E5%8C%96%E6%8A%A5%E5%91%8A/</guid>
      <description>&lt;p&gt;Python 作为一种常用的胶水语言，可用于各种用途。最近有个需求需要获取 SIME 平台的数据并形成月度报告。我的想法就是通过平台的 API 获取数据，然后基于 word 以及 matplotlib 来生成可视化报告。在这里要介绍一个比较好用的 python 库，docxtpl。这个库是一个基于 python-docx 的库，可以通过模板来生成报告。下面就介绍一下如何使用这些库，以及使用过程中的一些小问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;模板&#34;&gt;模板&lt;/h2&gt;&#xA;&lt;p&gt;docxtpl 是基于 jinja2 引擎的语法，类似于常见的 html 模板语法，变量经常会放在 &lt;code&gt;{{}}&lt;/code&gt; 中。假如我们希望在模板中设置变量 a 的值，那么我么可以在模板中填写 {{a}}。最后，我们通过 &lt;code&gt;render&lt;/code&gt; 来渲染模板即可。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Docxtpl(filename)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;13413&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;doc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Render(context)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么如果我们希望在模板中插入一个图片该怎么做呢，可以使用 InlineImage 去实例化图片：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; docxtpl &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; DocxTemplate, InlineImage&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# for height and width you have to use millimeters (Mm), inches or points(Pt) class :&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; docx.shared &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Mm, Inches, Pt&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; jinja2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; jinja2.utils &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Markup&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tpl&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;DocxTemplate(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/inline_image_tpl.docx&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myimage&amp;#39;&lt;/span&gt; : InlineImage(tpl,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/python_logo.png&amp;#39;&lt;/span&gt;,width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;myimageratio&amp;#39;&lt;/span&gt;: InlineImage(tpl, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/python_jpeg.jpg&amp;#39;&lt;/span&gt;, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;), height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;frameworks&amp;#39;&lt;/span&gt; : [{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt; : InlineImage(tpl,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/django.png&amp;#39;&lt;/span&gt;,height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;The web framework for perfectionists with deadlines&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt; : InlineImage(tpl,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/zope.png&amp;#39;&lt;/span&gt;,height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Zope is a leading Open Source Application Server and Content Management Framework&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;: InlineImage(tpl, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/pyramid.png&amp;#39;&lt;/span&gt;, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Pyramid is a lightweight Python web framework aimed at taking small web apps into big web apps.&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt; : InlineImage(tpl,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/bottle.png&amp;#39;&lt;/span&gt;,height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Bottle is a fast, simple and lightweight WSGI micro web-framework for Python&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;image&amp;#39;&lt;/span&gt;: InlineImage(tpl, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/tornado.png&amp;#39;&lt;/span&gt;, height&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mm(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;desc&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Tornado is a Python web framework and asynchronous networking library.&amp;#39;&lt;/span&gt;},&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# testing that it works also when autoescape has been forced to True&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jinja_env &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jinja2&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Environment(autoescape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tpl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;render(context, jinja_env)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tpl&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test_files/inline_image.docx&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样还可以使用宽度高度单位来设置图片的大小。另外我们还可以利用表格的模板来动态设置数据，具体可以参考 &lt;a href=&#34;https://github.com/elapouya/python-docx-template/tree/master/tests&#34;&gt;test&lt;/a&gt;，里面有各种例子可以参考。&lt;/p&gt;</description>
    </item>
    <item>
      <title>常用的正则表达式</title>
      <link>https://madneal.com/post/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 15 Dec 2015 21:19:43 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;p&gt;正则表达式的用处很多，在很多地方都可以用得到，下面介绍一些常用的正则表达式&#xA;一、校验数字的表达式&lt;/p&gt;&#xA;&lt;p&gt;数字：^[0-9]*$&lt;/p&gt;&#xA;&lt;p&gt;n位的数字：^\d{n}$&lt;/p&gt;&#xA;&lt;p&gt;至少n位的数字：^\d{n,}$&lt;/p&gt;&#xA;&lt;p&gt;m-n位的数字：^\d{m,n}$&lt;/p&gt;&#xA;&lt;p&gt;零和非零开头的数字：^(0|[1-9][0-9]*)$&lt;/p&gt;&#xA;&lt;p&gt;非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$&lt;/p&gt;&#xA;&lt;p&gt;带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$&lt;/p&gt;&#xA;&lt;p&gt;正数、负数、和小数：^(-|+)?\d+(.\d+)?$&lt;/p&gt;&#xA;&lt;p&gt;有两位小数的正实数：^[0-9]+(.[0-9]{2})?$&lt;/p&gt;&#xA;&lt;p&gt;有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$&lt;/p&gt;&#xA;&lt;p&gt;非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]&lt;em&gt;){1,3}$ 或 ^+?[1-9][0-9]&lt;/em&gt;$&lt;/p&gt;&#xA;&lt;p&gt;非零的负整数：^-[1-9][]0-9″&lt;em&gt;$ 或 ^-[1-9]\d&lt;/em&gt;$&lt;/p&gt;&#xA;&lt;p&gt;非负整数：^\d+$ 或 ^[1-9]\d*|0$&lt;/p&gt;&#xA;&lt;p&gt;非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$&lt;/p&gt;&#xA;&lt;p&gt;非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0$&lt;/p&gt;&#xA;&lt;p&gt;非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d*.\d*|0.\d*[1-9]\d*))|0?.0+|0$&lt;/p&gt;&#xA;&lt;p&gt;正浮点数：^[1-9]\d*.\d*|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]&lt;em&gt;[1-9][0-9]&lt;/em&gt;)|([0-9]&lt;em&gt;[1-9][0-9]&lt;/em&gt;.[0-9]+)|([0-9]&lt;em&gt;[1-9][0-9]&lt;/em&gt;))$&lt;/p&gt;&#xA;&lt;p&gt;负浮点数：^-([1-9]\d*.\d*|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]&lt;em&gt;[1-9][0-9]&lt;/em&gt;)|([0-9]&lt;em&gt;[1-9][0-9]&lt;/em&gt;.[0-9]+)|([0-9]&lt;em&gt;[1-9][0-9]&lt;/em&gt;)))$&lt;/p&gt;&#xA;&lt;p&gt;浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d*.\d*|0.\d*[1-9]\d*|0?.0+|0)$&lt;/p&gt;&#xA;&lt;p&gt;二、校验字符的表达式&lt;/p&gt;&#xA;&lt;p&gt;汉字：^[\u4e00-\u9fa5]{0,}$&lt;/p&gt;&#xA;&lt;p&gt;英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$&lt;/p&gt;&#xA;&lt;p&gt;长度为3-20的所有字符：^.{3,20}$&lt;/p&gt;&#xA;&lt;p&gt;由26个英文字母组成的字符串：^[A-Za-z]+$&lt;/p&gt;&#xA;&lt;p&gt;由26个大写英文字母组成的字符串：^[A-Z]+$&lt;/p&gt;&#xA;&lt;p&gt;由26个小写英文字母组成的字符串：^[a-z]+$&lt;/p&gt;&#xA;&lt;p&gt;由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$&lt;/p&gt;&#xA;&lt;p&gt;由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$&lt;/p&gt;&#xA;&lt;p&gt;中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$&lt;/p&gt;&#xA;&lt;p&gt;中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$&lt;/p&gt;&#xA;&lt;p&gt;可以输入含有^%&amp;amp;’,;=?$\”等字符：[^%&amp;amp;&amp;rsquo;,;=?$\x22]+&lt;/p&gt;&#xA;&lt;p&gt;禁止输入含有&lt;del&gt;的字符：[^&lt;/del&gt;\x22]+&lt;/p&gt;&#xA;&lt;p&gt;三、特殊需求表达式&lt;/p&gt;&#xA;&lt;p&gt;Email地址：^\w+([-+.]\w+)&lt;em&gt;@\w+([-.]\w+)&lt;/em&gt;.\w+([-.]\w+)*$&lt;/p&gt;&#xA;&lt;p&gt;域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?&lt;/p&gt;&#xA;&lt;p&gt;InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;amp;=]*)?$&lt;/p&gt;&#xA;&lt;p&gt;手机号码：^(13[0－9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$&lt;/p&gt;&#xA;&lt;p&gt;电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^($$\d{3,4}-)|\d{3.4}-)?\d{7,8}$&lt;/p&gt;&#xA;&lt;p&gt;国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}&#xA;身份证号(15位、18位数字)：^\d{15}|\d{18}$&lt;/p&gt;</description>
    </item>
    <item>
      <title>从后台看python--为什么说python是慢的</title>
      <link>https://madneal.com/post/%E4%BB%8E%E5%90%8E%E5%8F%B0%E7%9C%8Bpython--%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4python%E6%98%AF%E6%85%A2%E7%9A%84/</link>
      <pubDate>Tue, 08 Dec 2015 10:14:12 +0000</pubDate>
      <guid>https://madneal.com/post/%E4%BB%8E%E5%90%8E%E5%8F%B0%E7%9C%8Bpython--%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4python%E6%98%AF%E6%85%A2%E7%9A%84/</guid>
      <description>&lt;p&gt;python越来越作为一种科学技术研究的语言越来越流行，可是我们经常听到一个问题，python是慢的。那么我们从后台分析一下，为什么python是慢的。&#xA;python是一种动态类型，解释型语言，它的值都是存储在分散的对象中，而不是紧密的缓存之中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1python是动态类型语言&#34;&gt;1.python是动态类型语言&lt;/h2&gt;&#xA;&lt;p&gt;这意味着编译器在程序执行之前并不知道变量定义的类型。C定义变量和Python定义变量的方式的区别：&#xA;对于C，编译器通过定义知道变量的类型；然而对于python中的变量，当你知道变量的类型的时候已经是程序执行的时候了。&#xA;我们分析一小段代码分别在python和C中执行的具体区别：&#xA;在C中，如果你写如下代码：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int a = 1;&#xA;int b = 2;&#xA;int c = a + b;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.分配一个&lt;!-- raw HTML omitted --&gt;类型1给a&#xA;2.分配一个&lt;!-- raw HTML omitted --&gt;类型2给b&#xA;3.调用一个二进制加法&amp;lt;int,int&amp;gt;(a,b)&#xA;4.将结果分配给c&lt;/p&gt;&#xA;&lt;p&gt;在python中，同样的&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;a = 1&#xA;b = 2&#xA;c = a + b&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.分配1给a&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置一个对象，然后将它的类型设置为整数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将它的值设为1&#xA;2.分配2给b&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;设置一个对象，然后将它的类型设置为整数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将它的值设为2&#xA;3.调用一个二进制加法(a,b)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;寻找一个类型在对象中&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;a是一个整数，它的值是a&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;寻找一个类型在对象中&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;b是一个整数，它的值是b&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;调用一个二进制加法&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;返回结果，结果是一个整数&#xA;4.产生一个对象c&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将一个对象的类型设置为整数&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;将它的值分配给结果&#xA;动态类型意味着每一步操作需要更多的步骤。python比c慢的一个基本的原因就是数字计算上面的操作。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2python是一种解释型的语言而不是编译型的&#34;&gt;2.python是一种解释型的语言而不是编译型的&lt;/h2&gt;&#xA;&lt;p&gt;我们可以看到解释型语言和编译型语言的区别。一个聪明的编译器知道怎么提前优化，避免重复和不必要的操作，从而提高效率。当然，在这一点上也是仁者见仁智者见智。&lt;/p&gt;&#xA;&lt;h2 id=&#34;3python的对象模型导致存储效率低下&#34;&gt;3.python的对象模型导致存储效率低下&lt;/h2&gt;&#xA;&lt;p&gt;python存储数据效率低下的原因，主要可以从下图看出：&#xA;&lt;img src=&#34;http://img.blog.csdn.net/20151208101154529&#34; alt=&#34;这里写图片描述&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;当然说了python这么多缺点，为什么python用的人还这么多，因为它很简单啊。python用起来的确很简单，就我个人的使用感受而言，除了matlab，我没有看过比python还要简单的语言了。而且python的开源的库很多，所以做很多东西都很方便。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
