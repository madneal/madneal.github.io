<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发 on Neal&#39;s Blog</title>
    <link>https://madneal.com/categories/%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 开发 on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sat, 30 Aug 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/categories/%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go toolchain,这玩意有啥用？</title>
      <link>https://madneal.com/post/toolchain/</link>
      <pubDate>Sat, 30 Aug 2025 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/toolchain/</guid>
      <description>&lt;p&gt;最近，我和一名同事因为项目中 Go 的版本和 toolchain 的版本不一致有了不同的意见。有一个项目的 go.mod 文件中的声明如下：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;go 1.21.1&#xA;&#xA;toolchain go1.22.9&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这名同事认为这种声明是非常奇葩的，这样会导致本地编译版本与线上的版本不一致。当然，我一开始并不明白他说的线上的版本是什么意思，后来才明白他说的是线上容器镜像的 golang 版本。实际项目的镜像是基于 golang-base 1.21 的一个自定义镜像，所以无法直接看出这个镜像使用的是什么 golang 版本（当然，一开始我也并未意识到这点）。抛开这点不谈，他的核心观点是我们本地使用 &lt;code&gt;toolchain go1.22.9&lt;/code&gt; 版本，但是线上使用 1.21 版本去编译，是有问题的。并且抛出了 AI 的回答：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;提问：go.mod 中 Go 版本与 Toolchain 版本不一致会带来什么问题？&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;go &amp;lt;X.Y&amp;gt;&lt;/code&gt;：声明模块期望的语言语义、标准库 API 可用性、构建默认行为（如 &lt;code&gt;for loop&lt;/code&gt; 变量捕获、&lt;code&gt;vendor&lt;/code&gt; 行为等）的最低版本。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;toolchain &amp;lt;goX.Y[.Z]|path&amp;gt;&lt;/code&gt;：指定编译所需的具体工具链版本（可精确到补丁版本，或使用外部工具链路径）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;当两者不一致时，可能出现以下问题：&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-语言语义和编译行为不一致&#34;&gt;1) 语言语义和编译行为不一致&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;症状&lt;/strong&gt;：用更新的工具链编译旧 &lt;code&gt;go&lt;/code&gt; 版本的模块，语言语义仍按 &lt;code&gt;go&lt;/code&gt; 字段控制（Go 避免“隐式升级语义”），但某些编译器/链接器优化与警告行为会变化。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;影响&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编译器错误/警告数量与类型可能改变（例如更严格的检查或新增告警）。&lt;/li&gt;&#xA;&lt;li&gt;优化策略不同导致二进制体积/性能差异。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;关键点：&lt;code&gt;go&lt;/code&gt; 字段决定语言语义；工具链版本决定编译器实现细节和 bugfix/优化。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;2-标准库api-可用性错配&#34;&gt;2) 标准库/API 可用性错配&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;情况 A：工具链过旧 (&amp;lt; go.mod 的 go 版本)&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>NilAway：实用的 Go Nil Panic 检测方式</title>
      <link>https://madneal.com/post/nilayay/</link>
      <pubDate>Sat, 30 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/nilayay/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://www.uber.com/en-NL/blog/nilaway-practical-nil-panic-detection-for-go/&#34;&gt;NilAway: Practical Nil Panic Detection for Go&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/madneal&#34;&gt;madneal&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/madneal/articles-translator/&#34;&gt;articles-translator&lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2023/11/cover_photo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Uber 由于 &lt;a href=&#34;https://go.dev/?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;Go&lt;/a&gt; 语言的&lt;a href=&#34;https://www.uber.com/blog/tech-stack-part-one-foundation/?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;高性能&lt;/a&gt;，广泛采用其作为实现后端服务和库的主要编程语言。Uber 的 &lt;a href=&#34;https://www.uber.com/blog/go-monorepo-bazel/?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;Go monorepo&lt;/a&gt; 是 Uber 最大的代码库，包含 9000 万行代码（并且还在增长）。这使得编写可靠 Go 代码的工具成为我们开发基础设施的重要组成部分。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.golang-book.com/books/intro/8?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;指针&lt;/a&gt;（保存其他变量的内存地址而不是其实际值的变量）是 Go 编程语言的一个重要组成部分，有助于高效的内存管理和有效的数据操作。因此，程序员在编写 Go 程序时广泛使用指针，出于多种目的，如原地数据修改、并发编程、数据共享优化、内存使用优化以及支持接口和多态性。虽然指针功能强大且被广泛使用，但必须谨慎和明智地使用它们，以避免诸如空指针解引用导致的 nil panic 等常见陷阱。&lt;/p&gt;&#xA;&lt;h2 id=&#34;nil-panic-问题&#34;&gt;nil panic 问题&lt;/h2&gt;&#xA;&lt;p&gt;nil panic 是指程序尝试解引用一个 nil 指针时发生的运行时 panic。当一个指针为 nil 时，意味着它不指向任何有效的内存地址，尝试访问它指向的值将导致 panic（即运行时错误），错误信息如图 1 所示。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.uber-cdn.com/cdn-cgi/image/width=2048,quality=80,onerror=redirect,format=auto/wp-content/uploads/2023/11/figure_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;图 2 显示了在实现 Go 标准库（特别是 &lt;em&gt;net&lt;/em&gt; 包）中发现并解决的最近一次 &lt;a href=&#34;https://github.com/golang/go/pull/60823?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f&#34;&gt;nil panic 问题&lt;/a&gt; 的示例。由于在第 1859 行直接调用了方法 &lt;em&gt;RemoteAddr()&lt;/em&gt; 的返回值上的 &lt;em&gt;String()&lt;/em&gt; 方法，假设它总是非 nil 的，如图2所示，从而引发了 panic。当接口类型 &lt;em&gt;net.Conn&lt;/em&gt; 的字段 &lt;em&gt;c.rwc&lt;/em&gt; 被分配给结构 &lt;em&gt;net.conn&lt;/em&gt; 时导致了这个问题，因为如果发现连接 c 异常的话，它的 &lt;em&gt;RemoteAddr()&lt;/em&gt; 的具体实现可以返回 nil 值（如图 3 所示）。具体来说，&lt;em&gt;RemoteAddr()&lt;/em&gt; 可以在 L225 返回一个 &lt;a href=&#34;https://go.dev/tour/methods/13?uclick_id=6f537554-73b3-4559-9cd3-4ce624452b1f#:~:text=A%20nil%20interface%20value%20holds,which%20concrete%20method%20to%20call.&#34;&gt;nil 接口值&lt;/a&gt;，当被调用方法（&lt;em&gt;.String()&lt;/em&gt;）时，由于 &lt;em&gt;nil&lt;/em&gt; 值不包含任何指向可以调用的具体方法的指针，从而导致 nil panic。&lt;/p&gt;</description>
    </item>
    <item>
      <title>如何使用 Git 撤消（几乎）任何操作</title>
      <link>https://madneal.com/post/git-undo/</link>
      <pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/git-undo/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;原文：&lt;a href=&#34;https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/&#34;&gt;How to undo (almost) anything with Git&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;译者：&lt;a href=&#34;https://github.com/madneal&#34;&gt;madneal&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;welcome to star my &lt;a href=&#34;https://github.com/madneal/articles-translator/&#34;&gt;articles-translator&lt;/a&gt;, providing you advanced articles translation. Any suggestion, please issue or contact &lt;a href=&#34;mailto:bing.ecnu@gmail.com&#34;&gt;me&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;LICENSE: &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://github.blog/wp-content/uploads/2019/03/community-twitter.png?resize=1201%2C630&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;任何版本控制系统最有用的功能之一就是能够“撤消”错误。在 Git 中，“撤消”可能意味着许多略有不同的事情。&lt;/p&gt;&#xA;&lt;p&gt;当你进行新的 commit 时，Git 会及时存储你的仓库在该特定时刻的快照；之后，你可以使用 Git 返回到项目的早期版本。&lt;/p&gt;&#xA;&lt;p&gt;在这篇文章中，我将介绍一些你可能想要“撤消”所做更改的常见场景，以及使用 Git 执行此操作的最佳方法。&lt;/p&gt;&#xA;&lt;h2 id=&#34;撤销一个public修改&#34;&gt;撤销一个“public”修改&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;场景：&lt;/strong&gt; 你刚刚运行了 &lt;code&gt;git push&lt;/code&gt;，将你的修改 push 到 GitHub，现在意识到有一个 commit 有问题。你想把这个 commit 撤销。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;撤销：&lt;/strong&gt; &lt;code&gt;git revert &amp;lt;SHA&amp;gt;&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;结果：&lt;/strong&gt; &lt;code&gt;git revert&lt;/code&gt; 将创建一个与给定 SHA 相反的新 commit。如果旧 commit 是“matter”，则新 commit 是“anti-matter”——旧 commit 中删除的任何内容都将添加到新 commit 中，而旧 commit 中添加的任何内容都将在新 commit 中删除。&lt;/p&gt;</description>
    </item>
    <item>
      <title>基于golang实现报告生成技术方案</title>
      <link>https://madneal.com/post/go-report/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/go-report/</guid>
      <description>&lt;p&gt;最近在做一个基于历史数据生成报告的需求，在做这个需求的时候遇到过一些小坑，所以想在这篇文章分享一下踩坑经验。&lt;/p&gt;&#xA;&lt;p&gt;最初的需求是基于历史数据来生成一个 word 报告，这种需求其实在大多数应用中也算比较常见的需求。但是由于我们使用的语言是 golang，而 golang 关于 word 方面的轮子是少之又少，只有一个国外的商业产品以及极少的特别不成熟的库，比如做一些简单的文字替换的，这些都比较难以满足需求现状。也不可能为了这么个需求就造一个 word 方面的轮子，况且还不一定造的出来。这种方案实现，如果是使用 java 或者 python 会轻松很多，的确 golang 在某些方面的轮子还是存在缺失。后来想到的方案是，先渲染 html 模板，然后再把 html 转成 pdf。渲染 html 不然，基于 template，理论上可以实现任意文本格式文件的填充，但是转 pdf 又又涉及另外一个轮子，也是一番调研，有一些，但是不太多，看起来也不是特别好用。同时，这个方案也不是很优雅。就在一筹莫展之际时，我想到我们内部其实非常热衷于通过自研的 wiki 平台来分享报告，大家分享的时候也经常通过这个平台来直接链接。（其实中间也看了腾讯文档的开放平台，但是这个开放平台根本就不成熟，都没有开放写入的能力，只开放了创建文档的 API，不能写入，那能有啥用呢。）后来找对应平台的开发聊过，幸好他们提供写入的 API，这样实现报告的方案就实现了。平台支持 markdown 的语法，只需要通过 markdown 的语法来渲染好模板，然后写入就可以了。随便提一句，任何不支持 markdown 语法的编辑器都是极其不友好的，所以非常难理解当初 freebuf 改造 markdown 编辑器居然花了一两年的时间，不知道是如何做到的。其实，我自己都为这个方案拍案叫绝，不过这好像也是唯一能实现的技术方案，但在我看来，也是最优雅的实现方式。&lt;/p&gt;&#xA;&lt;p&gt;这个需求另外一个小坑就是图标的实现。wiki 平台自身没有提供基于数据实现图表的功能，所欲图表的需求是需要我们自己来实现的。这种最能想到的方式就是基于数据生成图表的图片，然后插入到 markdown 中。在调研图表的方案中，是有看到一个 &lt;a href=&#34;https://github.com/wcharczuk/go-chart&#34;&gt;go-chart&lt;/a&gt; 的方案。但是这个库看起来可定制型不是很高。echarts 是前端领域大名鼎鼎的数据可视化方案，可以说的上是百度做的开源精品，现在已经属于 apace 基金维护的开源产品。&lt;a href=&#34;https://github.com/go-echarts/go-echarts&#34;&gt;go-echarts&lt;/a&gt; 是一个基于 echarts 的 golang，其本质应该还是通过 echarts 来渲染前端。所以在使用这个库的时候有一个问题，它不会直接生成图片，而是通过 html 来进行渲染的。那么在嵌入图表的时候就不能使用图片，但是正因为之前使用的方案是 markdown，且一般来说大多数 markdown 是兼容 html 的，所以只要将 html 通过 iframe 的形式嵌入，那么这个问题也就迎刃而解了。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;iframe  src=&amp;#34;%s&amp;#34;  frameborder=0 width=&amp;#34;1000&amp;#34; height=&amp;#34;600&amp;#34;&amp;gt;&amp;lt;/iframe&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同时得益于 echarts 的灵活，这个方案也可以实现高度定制化的可视化方案。不过这个库并没有丰富的文档，大多数的使用教程都是通过 &lt;a href=&#34;https://github.com/go-echarts/examples&#34;&gt;examples&lt;/a&gt; 里面的代码样例来进行说明，这个仓库里面有很多图表的各种形式展现的代码样例。不过在图表的时候也遇到一些问题。比如 x 坐标轴的 label 文字过宽，导致容器容纳有问题，这个一般的做法都是将 label 进行旋转，这在 echarts 里面也是比较常见的做法，在 go-echarts 里面有一定的配置语法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>全栈工程师的成长</title>
      <link>https://madneal.com/%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%88%90%E9%95%BF/</guid>
      <description>&lt;p&gt;三年之前，我写过一篇&lt;a href=&#34;https://segmentfault.com/a/1190000009470801&#34;&gt;菜鸟程序猿成长史&lt;/a&gt;。当时我还是一名踌躇满志的前端开发，立志要在前端领域大展拳脚。当时，前端中的开发最乐此不疲的事就是为了哪个框架最优秀而天天打口水仗。三年过去了，我已经不再是一名前端工程师，变成了一名偶尔怼人和被怼的安全工程师。工作这几年，不管还是在技术学习上，还是工作上，作为一名立志成为一名全栈工程师的人，也分享一下这几年的一些经验。&lt;/p&gt;&#xA;&lt;h1 id=&#34;软技能篇&#34;&gt;软技能篇&lt;/h1&gt;&#xA;&lt;p&gt;这里的软技能篇我指的是一些基础技能，可能这些技能不是能够在很短时间内养成，可能需要一年甚至更长的时间。在我技术学习和实践的过程中，我觉得有个词是非常重要的，即阅读和实践。阅读掌握理论知识，实践让你熟悉技能，掌握技能。其实不管是做开发和做安全，都是一门技术活，和其它的技术工种从本质上来说没有太大的区别，当然天才型选手除外。对于阅读来说，我觉得英语是非常重要的。因为不得不承认，大部分最优秀的技术知识都是通过英语传播的，通过英语，你可以看多更原汁原味的技术文章，国内某些翻译的书籍有时候真的是有点惨不忍睹。另外，往往通过英文关键字也可能更容易找到问题的答案。现在大多数的技术问题，互联网上早就有类似的解决方案，问题是如何正确地检索到。&lt;/p&gt;&#xA;&lt;p&gt;坚持，也是做技术的一个比较重要的品质。因为，在我们平常工作的过程中，问题往往不是一下子就能够找到。很多问题需要一直坚持，一直摸索，突然有天拍脑袋说我咋没想到这点。坚持同样适用于技术的学习，只有坚持学习新的技术，才不会被技术所淘汰。行动力，我觉得这也是做技术不可或缺的一个好的品质。想到一个好的点子马上就去实现，想到好的思想可以马上写文章总结，看到好的工具马上就去尝试。在这里我并不想像三年以前一样，把每一个工具都一个个的列出来。我觉得工具只是辅助人去更好的提高效率,但根本还是取决于人本身。所以行动力很重要，如果有好的工具你放在那永远都不会去使用，那也是于事无补的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>持续发布 Chrome 插件</title>
      <link>https://madneal.com/post/%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83chrome%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83chrome%E6%8F%92%E4%BB%B6/</guid>
      <description>&lt;p&gt;Chrome 插件对于 Chrome 浏览器用户来说是必不可少的利器之一。之前我有开发过一款七牛云图床的 Chrome 插件 &lt;a href=&#34;https://github.com/neal1991/image-host&#34;&gt;image-host&lt;/a&gt;。后来由于我自己没有自己的域名，所以不太好使用这个插件了。后面，有其他的同学来提交 PR 来维护这一个插件。这样就有一个问题，一旦新的代码发布，就需要自己再重新发布一下插件。虽然发布插件不算特别麻烦，打包成压缩包，上传就可以了，但是对于程序员来说，可以自动做的绝对不要手动做。以下就是通过 CircleCI 来持续发布 Chrome 插件，参考了官方的文章，自己也才了一些坑。&lt;/p&gt;&#xA;&lt;h2 id=&#34;介绍&#34;&gt;介绍&lt;/h2&gt;&#xA;&lt;p&gt;CircleCI 是一款持续集成产品，和 Travis 非常类似，都属于 Github 上非常流行的持续集成产品。产品有商业和普通版本，开源项目是可以免费使用的。关于持续集成产品的不同，可以参考&lt;a href=&#34;https://hackernoon.com/continuous-integration-circleci-vs-travis-ci-vs-jenkins-41a1c2bd95f5&#34;&gt;这篇文章&lt;/a&gt;。使用这个工具持续发布 Chrome 插件的原理就是：通过 CircleCI 来使用 Chrome 插件的 API 来持续发布插件，通过 CirecleCI 和 github 的集成可以在特定的时机就可以发布插件。那么下面具体介绍如何使用 CircleCI 来进行 Chrome 插件的发布，主要包括 Google API 的配置以及 CirecleCI 的配置。&lt;/p&gt;&#xA;&lt;h2 id=&#34;google-api&#34;&gt;Google API&lt;/h2&gt;&#xA;&lt;p&gt;首先，创建一个 Google API 项目，可以直接点击&lt;a href=&#34;https://console.developers.google.com/projectcreate?organizationId=0&#34;&gt;这个链接&lt;/a&gt;创建。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/06/02/VG6DzV.png&#34; alt=&#34;VG6DzV.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在创建项目之后，我们需要开启 &amp;ldquo;Chrome Web Store API&amp;rdquo;。在 Library 中搜索这个 API， 并且将其 ENABLE。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/06/02/VGW99s.png&#34; alt=&#34;VGW99s.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;在 ENABLE 这个 API 之后，就可以点击 &amp;ldquo;CREATE CREDENTIALS&amp;rdquo; 创建口令了。确保你已经选择了对应创建的 project。值得注意的一点是，你创建的应该是 OAuth client ID 类型的，确保你选择了正确的类型。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
