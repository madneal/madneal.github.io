<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全开发 on Neal&#39;s Blog</title>
    <link>https://madneal.com/categories/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 安全开发 on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sat, 31 Aug 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/categories/%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何写一个 burp 插件</title>
      <link>https://madneal.com/post/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AAburp%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Sat, 31 Aug 2019 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%B8%AAburp%E6%8F%92%E4%BB%B6/</guid>
      <description>&lt;p&gt;Burp 是 web安全测试中不可或缺的神器。每一个师傅的电脑里面应该都有一个 Burp。同时 Burp 和很多其他神器一样，它也支持插件。但是目前总体来说网上 Burp 插件开发的资料不是特别特别的丰富。今天我也来讲讲自己如何从一个完全不会 Burp 插件开发的小白如何学习 Burp 插件的开发。&lt;/p&gt;&#xA;&lt;h2 id=&#34;如何调试&#34;&gt;如何调试&lt;/h2&gt;&#xA;&lt;p&gt;其实开发一样东西，调试真的特别重要。如果没有调试，那就和瞎子摸象差不多，非常的难顶。尤其是在 Burp 插件的开发过程中，如果你不可以调试，那你就必须把 jar 包打包出来，再安装，然后通过 output 来打印调试，这样的确非常地痛苦。后来在网上找了一些资料，一开始没太明白，后来研究发现原来调试配置这么简单。这么我们以宇宙 JAVA 开发神器 IDEA 为例。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;配置 DEBUG&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;首先是在 IDEA 里面配置调试。点击右上角里面的配置，点击 &amp;ldquo;Edit Configurations&amp;rdquo; 就可以进入对 DEBUG 的配置页面。新增一个 Remote 配置，命名可以随自己的喜好。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/08/31/mxiIde.png&#34; alt=&#34;mxiIde.png&#34;&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;命令行启动 Burp&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;为了配合调试，需要在命令行中使用刚才新建 DEBUG 配置的参数来启动 Burp。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar burpsuite_community_v2.1.02.jar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;部署 jar 包，打断点&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;可以现在程序中打一下断点。接着就是编译 jar 包，并且启动 IDE 的 DEBUG。将 jar 包部署到 Burp 中，下面就可以快乐地调试了。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/09/01/nSZGi8.png&#34; alt=&#34;nSZGi8.png&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;burp-开发&#34;&gt;Burp 开发&lt;/h2&gt;&#xA;&lt;p&gt;老是说其实 Burp 插件开发其实还是比较简单的，只要你掌握常规的套路，熟悉了基本的 API 之后，基本就可以进行插件的开发。插件开发最困难的部分其实是 GUI 的开发，不过这也属于 JAVA GUI 开发的范畴，这个暂不讨论。Burp 开发注意以下几点：&lt;/p&gt;</description>
    </item>
    <item>
      <title>cve check</title>
      <link>https://madneal.com/post/check-cve/</link>
      <pubDate>Thu, 04 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/check-cve/</guid>
      <description>&lt;p&gt;今天想检查一下 Gitlab 11.9.0 产品受哪些 cve 的影响。其实网上已经有很多网站可以查询产品的相关 cve，但就是粒度比较粗。我想在 cve 列表中筛选出特定的版本，已经特定的版本，比如是社区版还是旗舰版。找了一下，没有发现完全符合这个要求的。后来在网上我就看到了一个网站是可以提供 cve 的 API 查询的。可以通过网站 API 可以获取特定的数据。&lt;/p&gt;&#xA;&lt;p&gt;可以通过 &lt;a href=&#34;https://cve.circl.lu/api/&#34;&gt;https://cve.circl.lu/api/&lt;/a&gt; 可以看到 API 文档。可以通过 cve id 以及 product 以及其他更多信息来查询。最有用的 API 就是这一个，&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.ax1x.com/2019/07/04/ZUIwgH.png&#34; alt=&#34;ZUIwgH.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;可以通过 vendor 以及 product 获取指定 vendor 和 product 的 cve 列表。这个 API 返回的结果是一个 JSON 数组，我们需要在这里面过滤出相应的版本号以及 edition 版本。另外由于请求的结果一般是一个很长的 json 数据，我的做法是第一次请求，可以吧结果保存成 JSON 文件，第二次请求的时候首先检查这个 JSON 文件的最近修改时间，如果最近修改时间小于指定的天数，比如 3 天，如果 3 天内修改过的话，直接从 JSON 文件加载数据，否则重新发送请求，加载数据。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# check if file modified in the last several days&#xA;def check_file_modified(filename, days):&#xA;    file_modify_time = getmtime(filename)&#xA;    return time() - file_modify_time &amp;lt; (days * 3600 * 1000)&#xA;&#xA;&#xA;def write_json(filename, result):&#xA;    with open(filename, &amp;#39;w&amp;#39;) as f:&#xA;        dump(result, f, indent=2)&#xA;&#xA;&#xA;def write_csv(filename, result, header):&#xA;    with open(filename, &amp;#39;w&amp;#39;, newline=&amp;#39;&amp;#39;) as f:&#xA;        writer = csv.writer(f, delimiter=&amp;#39;,&amp;#39;)&#xA;        writer.writerow(header)&#xA;        for ele in result:&#xA;            writer.writerow([ele[&amp;#34;id&amp;#34;], ele[&amp;#34;last-modified&amp;#34;], ele[&amp;#34;cvss&amp;#34;], ele[&amp;#34;summary&amp;#34;]])&#xA;&#xA;&#xA;def search(params, options):&#xA;    url = &amp;#34;https://cve.circl.lu/api/search/&amp;#34; + params&#xA;    print(url)&#xA;    filename = f&amp;#34;{params.replace(&amp;#39;/&amp;#39;, &amp;#39;-&amp;#39;)}.json&amp;#34;&#xA;    try:&#xA;        if isfile(filename) and check_file_modified(filename, 3):&#xA;            with open(filename, &amp;#39;r&amp;#39;) as f:&#xA;                result = loads(f.read())&#xA;        else:&#xA;            res = get(url)&#xA;            if res.status_code == 200:&#xA;                with open(filename, &amp;#39;w&amp;#39;) as f:&#xA;                    f.write(res.text)&#xA;                result = loads(res.text)&#xA;            else:&#xA;                print(&amp;#34;Request failed: %d&amp;#34;.format(res.status_code))&#xA;        cve_result = []&#xA;        for ele in result:&#xA;            if has_cve(ele, options.vendor, options.product, options.version, options.edition):&#xA;                obj = {&#xA;                    &amp;#34;id&amp;#34;: ele[&amp;#34;id&amp;#34;],&#xA;                    &amp;#34;last-modified&amp;#34;: ele[&amp;#34;last-modified&amp;#34;],&#xA;                    &amp;#34;cvss&amp;#34;: ele[&amp;#34;cvss&amp;#34;],&#xA;                    &amp;#34;summary&amp;#34;: ele[&amp;#34;summary&amp;#34;]&#xA;                }&#xA;                cve_result.append(obj)&#xA;            else:&#xA;                continue&#xA;        print(f&amp;#34;{options.vendor}:{options.product}:{options.version}:{options.edition} &amp;#34;&#xA;              f&amp;#34;has impacted by {len(cve_result)} cve&amp;#34;)&#xA;        if options.output is None or options.output == &amp;#34;csv&amp;#34;:&#xA;            write_csv(&amp;#34;result.csv&amp;#34;, cve_result, [&amp;#34;id&amp;#34;, &amp;#34;last-modified&amp;#34;, &amp;#34;cvss&amp;#34;, &amp;#34;summary&amp;#34;])&#xA;        else:&#xA;            write_json(&amp;#34;result.json&amp;#34;, cve_result)&#xA;    except Exception as e:&#xA;        print(e)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整的项目地址可以参考 &lt;a href=&#34;https://github.com/neal1991/check-cve/blob/master/check-cve.py&#34;&gt;https://github.com/neal1991/check-cve/blob/master/check-cve.py&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
