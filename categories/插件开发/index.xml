<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>插件开发 on Neal&#39;s Blog</title>
    <link>https://madneal.com/categories/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
    <description>Recent content in 插件开发 on Neal&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Tue, 03 May 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://madneal.com/categories/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第一款Goland的SCA插件开发之旅</title>
      <link>https://madneal.com/post/goland-plugin/</link>
      <pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate>
      <guid>https://madneal.com/post/goland-plugin/</guid>
      <description>&lt;p&gt;插件开发，是一件即快乐又痛苦的事情。快乐的是你可以根据自己的需求通过插件来进行实现，比如经常看到的 Chrome 的插件开发。插件对于应用的原生生态有着很大的益处，往往那些特别优秀的插件甚至会被官方收编或者在正式功能中加入插件的功能。痛苦的是你需要去看文档，看插件开发的各种文档，如果文档不详细的话，痛苦加倍。程序猿最讨厌的事就是看别人的文档以及自己写文档。当然，除了文档，作为小白你还会踩到各种各样的坑。&lt;/p&gt;&#xA;&lt;h2 id=&#34;先吐槽&#34;&gt;先吐槽&lt;/h2&gt;&#xA;&lt;p&gt;五一期间，疫情实在是憋得无趣，于是就成生了编写一款 Goland 上的 SCA 检测的插件的想法。Jetbrains 作为一个 IDE 开发公司，通过 Java 的语言生态开发出 IDEA 全家桶系列如此精美并且功能强大的 IDE 产品。其背后的技术能力不得不让人折服。IDE 是程序猿开发的生产力，而 Jetbrains 公司则是生产力的生产力。这几天，笔者就在着力开发一款针对 Goland 的第一款 SCA 检测插件。相较于以往 Chrome 或者 Burp 的插件开发而言，Jetbrains 插件开发的难度大大提升，主要是因为以下几点原因：&lt;/p&gt;&#xA;&lt;h3 id=&#34;api-文档过于简单&#34;&gt;API 文档过于简单&lt;/h3&gt;&#xA;&lt;p&gt;IntelliJ 只提供了官方的&lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/welcome.html&#34;&gt;文档地址&lt;/a&gt;。这里面包含了一些 API 的实现以及介绍，但是太简单了。全篇中几乎找不到相关实现的示例代码，通常只有寥寥数语的介绍。举一个例子，希望能够通过插件能够创建文件，在找遍了官方的文档后，只发现了以下内容：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/05/03/wGphsPyntzdJgqc.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;文档里面提到可以使用 &lt;code&gt;PsiDirectory&lt;/code&gt; 中的 &lt;code&gt;add&lt;/code&gt; 方法来保存 &lt;code&gt;PSI&lt;/code&gt; 文件，但它没说 HOW！那怎么办，只能去 Github 中去搜索代码关键字，然后扒别人的代码去看别人是如何实现的，这绝对是一个非常痛苦的过程，尤其是你看的是一个实现很糟糕的插件。&lt;/p&gt;&#xA;&lt;h3 id=&#34;api-复杂性&#34;&gt;API 复杂性&lt;/h3&gt;&#xA;&lt;p&gt;由于 IDEA 强大的生态，其 API 要考虑到兼容性以及很多特性，所以 API 中很多的含义不好理解。其本身也是包含了很多复杂的配置项，同时还需要综合考虑插件是通过什么样的形式去实现。&lt;/p&gt;&#xA;&lt;h3 id=&#34;太强大的官方模板&#34;&gt;太“强大的”官方模板&lt;/h3&gt;&#xA;&lt;p&gt;官方提供了一个创建插件的&lt;a href=&#34;https://github.com/JetBrains/intellij-platform-plugin-template&#34;&gt;模板&lt;/a&gt;。首先承认的一点是这个模板的功能非常强大，涵盖插件开发、单元测试、质量检查、发布的整个生命周期，并且与 Github 无缝集成。不过作为模板，它包含的内容是不是太多了呢？这个模板的 README 几乎看了3遍之后才知道里面包含了哪些内容。实际上，对于一个小白来说，这个过程挺痛苦的，甚至可能有的人看了一下就萌发了退意。里面的一些模块，比如单元测试模块以及覆盖率检查这些模块，可以作为可选项，并不一定要默认就包含进去。&lt;/p&gt;&#xA;&lt;h3 id=&#34;bug-有一点点多&#34;&gt;Bug 有一点点多&lt;/h3&gt;&#xA;&lt;p&gt;目前尚未确定是否这是一个 Bug，但是笔者严重怀疑这是一个 Bug。上面提到的模板，通过 Gradle 实现了一系列的任务。在 &lt;code&gt;Run Verifications&lt;/code&gt; 中，有个小任务是 &lt;code&gt;./gradlew listProductsReleases&lt;/code&gt;，它会在 &lt;code&gt;build&lt;/code&gt; 文件中生成一个 &lt;code&gt;listProductsReleases.txt&lt;/code&gt; 的文件。而这个文件中的版本应该适用于 IDE 兼容型的检查。但是在运行这个 task 的过程中，反复遇到下面的报错：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
